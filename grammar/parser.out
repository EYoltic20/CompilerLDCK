Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> empezar
Rule 1     empezar -> PROGRAM ID SEMICOMMA var_or_func END
Rule 2     var_or_func -> vars func_create
Rule 3     var_or_func -> func_create
Rule 4     func_create -> funcs func_create
Rule 5     func_create -> EMPTY
Rule 6     body -> LBRACE statment RBRACE
Rule 7     statment -> assign statment
Rule 8     statment -> assign
Rule 9     statment -> conditions
Rule 10    statment -> conditions statment
Rule 11    statment -> fcall
Rule 12    statment -> fcall statment
Rule 13    statment -> imprimir statment
Rule 14    statment -> imprimir
Rule 15    statment -> vars
Rule 16    statment -> vars statment
Rule 17    assign -> ID EQ expression SEMICOMMA
Rule 18    assign -> ID EQ cte SEMICOMMA
Rule 19    cte -> CTE_INT
Rule 20    cte -> CTE_FLOAT
Rule 21    funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA
Rule 22    func_vars -> ID DOUBLEPOINT type COMMA func_vars
Rule 23    func_vars -> EMPTY
Rule 24    expression -> exp op
Rule 25    op -> GT exp
Rule 26    op -> GTE exp
Rule 27    op -> LT exp
Rule 28    op -> LTE exp
Rule 29    op -> NT exp
Rule 30    op -> EMPTY
Rule 31    exp -> termino lopb
Rule 32    lopb -> PLUS termino
Rule 33    lopb -> MINUS termino
Rule 34    lopb -> EMPTY
Rule 35    termino -> factor lopa
Rule 36    lopa -> TIMES factor
Rule 37    lopa -> DIVIDE factor
Rule 38    lopa -> EMPTY
Rule 39    cycle -> WHILE body DO LPAR expression RPAR SEMICOMMA
Rule 40    fcall -> ID LPAR list_exp RPAR SEMICOMMA
Rule 41    list_exp -> expression list_exp
Rule 42    list_exp -> EMPTY
Rule 43    list_exp -> COMMA list_exp
Rule 44    factor -> LPAR expression RPAR
Rule 45    factor -> lopb id_cte
Rule 46    factor -> id_cte
Rule 47    id_cte -> ID
Rule 48    id_cte -> cte
Rule 49    conditions -> IF LPAR expression RPAR body haselse SEMICOMMA
Rule 50    haselse -> ELSE body
Rule 51    haselse -> EMPTY
Rule 52    imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA
Rule 53    lst_printing_options -> CTE_STRING COMMA lst_printing_options
Rule 54    lst_printing_options -> expression
Rule 55    lst_printing_options -> expression COMMA lst_printing_options
Rule 56    lst_printing_options -> vars
Rule 57    lst_printing_options -> vars COMMA lst_printing_options
Rule 58    lst_printing_options -> CTE_STRING
Rule 59    vars -> VAR lst_var
Rule 60    lst_var -> lst_id DOUBLEPOINT type SEMICOMMA
Rule 61    lst_var -> EMPTY
Rule 62    lst_id -> ID lst_id
Rule 63    lst_id -> COMMA lst_id
Rule 64    lst_id -> EMPTY
Rule 65    type -> INT
Rule 66    type -> FLOAT
Rule 67    type -> VOID
Rule 68    EMPTY -> <empty>

Terminals, with rules where they appear

COMMA                : 22 43 53 55 57 63
CTE_FLOAT            : 20
CTE_INT              : 19
CTE_STRING           : 53 58
DIVIDE               : 37
DO                   : 39
DOUBLEPOINT          : 22 60
ELSE                 : 50
END                  : 1
EQ                   : 17 18
FLOAT                : 66
GT                   : 25
GTE                  : 26
ID                   : 1 17 18 21 22 40 47 62
IF                   : 49
INT                  : 65
LBRACE               : 6
LPAR                 : 21 39 40 44 49 52
LT                   : 27
LTE                  : 28
MINUS                : 33
NT                   : 29
PLUS                 : 32
PRINT                : 52
PROGRAM              : 1
RBRACE               : 6
RPAR                 : 21 39 40 44 49 52
SEMICOMMA            : 1 17 18 21 39 40 49 52 60
TIMES                : 36
VAR                  : 59
VOID                 : 21 67
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

EMPTY                : 5 23 30 34 38 42 51 61 64
assign               : 7 8
body                 : 21 39 49 50
conditions           : 9 10
cte                  : 18 48
cycle                : 
empezar              : 0
exp                  : 24 25 26 27 28 29
expression           : 17 39 41 44 49 54 55
factor               : 35 36 37
fcall                : 11 12
func_create          : 2 3 4
func_vars            : 21 22
funcs                : 4
haselse              : 49
id_cte               : 45 46
imprimir             : 13 14
list_exp             : 40 41 43
lopa                 : 35
lopb                 : 31 45
lst_id               : 60 62 63
lst_printing_options : 52 53 55 57
lst_var              : 59
op                   : 24
statment             : 6 7 10 12 13 16
termino              : 31 32 33
type                 : 22 60
var_or_func          : 1
vars                 : 2 15 16 56 57

Parsing method: LALR

state 0

    (0) S' -> . empezar
    (1) empezar -> . PROGRAM ID SEMICOMMA var_or_func END

    PROGRAM         shift and go to state 2

    empezar                        shift and go to state 1

state 1

    (0) S' -> empezar .



state 2

    (1) empezar -> PROGRAM . ID SEMICOMMA var_or_func END

    ID              shift and go to state 3


state 3

    (1) empezar -> PROGRAM ID . SEMICOMMA var_or_func END

    SEMICOMMA       shift and go to state 4


state 4

    (1) empezar -> PROGRAM ID SEMICOMMA . var_or_func END
    (2) var_or_func -> . vars func_create
    (3) var_or_func -> . func_create
    (59) vars -> . VAR lst_var
    (4) func_create -> . funcs func_create
    (5) func_create -> . EMPTY
    (21) funcs -> . VOID ID LPAR func_vars RPAR body SEMICOMMA
    (68) EMPTY -> .

    VAR             shift and go to state 8
    VOID            shift and go to state 11
    END             reduce using rule 68 (EMPTY -> .)

    var_or_func                    shift and go to state 5
    vars                           shift and go to state 6
    func_create                    shift and go to state 7
    funcs                          shift and go to state 9
    EMPTY                          shift and go to state 10

state 5

    (1) empezar -> PROGRAM ID SEMICOMMA var_or_func . END

    END             shift and go to state 12


state 6

    (2) var_or_func -> vars . func_create
    (4) func_create -> . funcs func_create
    (5) func_create -> . EMPTY
    (21) funcs -> . VOID ID LPAR func_vars RPAR body SEMICOMMA
    (68) EMPTY -> .

    VOID            shift and go to state 11
    END             reduce using rule 68 (EMPTY -> .)

    func_create                    shift and go to state 13
    funcs                          shift and go to state 9
    EMPTY                          shift and go to state 10

state 7

    (3) var_or_func -> func_create .

    END             reduce using rule 3 (var_or_func -> func_create .)


state 8

    (59) vars -> VAR . lst_var
    (60) lst_var -> . lst_id DOUBLEPOINT type SEMICOMMA
    (61) lst_var -> . EMPTY
    (62) lst_id -> . ID lst_id
    (63) lst_id -> . COMMA lst_id
    (64) lst_id -> . EMPTY
    (68) EMPTY -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    ID              shift and go to state 17
    COMMA           shift and go to state 18
    VOID            reduce using rule 68 (EMPTY -> .)
    END             reduce using rule 68 (EMPTY -> .)
    IF              reduce using rule 68 (EMPTY -> .)
    PRINT           reduce using rule 68 (EMPTY -> .)
    VAR             reduce using rule 68 (EMPTY -> .)
    RBRACE          reduce using rule 68 (EMPTY -> .)
    RPAR            reduce using rule 68 (EMPTY -> .)
    DOUBLEPOINT     reduce using rule 68 (EMPTY -> .)

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! COMMA           [ reduce using rule 68 (EMPTY -> .) ]

    lst_var                        shift and go to state 14
    lst_id                         shift and go to state 15
    EMPTY                          shift and go to state 16

state 9

    (4) func_create -> funcs . func_create
    (4) func_create -> . funcs func_create
    (5) func_create -> . EMPTY
    (21) funcs -> . VOID ID LPAR func_vars RPAR body SEMICOMMA
    (68) EMPTY -> .

    VOID            shift and go to state 11
    END             reduce using rule 68 (EMPTY -> .)

    funcs                          shift and go to state 9
    func_create                    shift and go to state 19
    EMPTY                          shift and go to state 10

state 10

    (5) func_create -> EMPTY .

    END             reduce using rule 5 (func_create -> EMPTY .)


state 11

    (21) funcs -> VOID . ID LPAR func_vars RPAR body SEMICOMMA

    ID              shift and go to state 20


state 12

    (1) empezar -> PROGRAM ID SEMICOMMA var_or_func END .

    $end            reduce using rule 1 (empezar -> PROGRAM ID SEMICOMMA var_or_func END .)


state 13

    (2) var_or_func -> vars func_create .

    END             reduce using rule 2 (var_or_func -> vars func_create .)


state 14

    (59) vars -> VAR lst_var .

    VOID            reduce using rule 59 (vars -> VAR lst_var .)
    END             reduce using rule 59 (vars -> VAR lst_var .)
    ID              reduce using rule 59 (vars -> VAR lst_var .)
    IF              reduce using rule 59 (vars -> VAR lst_var .)
    PRINT           reduce using rule 59 (vars -> VAR lst_var .)
    VAR             reduce using rule 59 (vars -> VAR lst_var .)
    RBRACE          reduce using rule 59 (vars -> VAR lst_var .)
    COMMA           reduce using rule 59 (vars -> VAR lst_var .)
    RPAR            reduce using rule 59 (vars -> VAR lst_var .)


state 15

    (60) lst_var -> lst_id . DOUBLEPOINT type SEMICOMMA

    DOUBLEPOINT     shift and go to state 21


state 16

    (61) lst_var -> EMPTY .
    (64) lst_id -> EMPTY .

    VOID            reduce using rule 61 (lst_var -> EMPTY .)
    END             reduce using rule 61 (lst_var -> EMPTY .)
    ID              reduce using rule 61 (lst_var -> EMPTY .)
    IF              reduce using rule 61 (lst_var -> EMPTY .)
    PRINT           reduce using rule 61 (lst_var -> EMPTY .)
    VAR             reduce using rule 61 (lst_var -> EMPTY .)
    RBRACE          reduce using rule 61 (lst_var -> EMPTY .)
    COMMA           reduce using rule 61 (lst_var -> EMPTY .)
    RPAR            reduce using rule 61 (lst_var -> EMPTY .)
    DOUBLEPOINT     reduce using rule 64 (lst_id -> EMPTY .)


state 17

    (62) lst_id -> ID . lst_id
    (62) lst_id -> . ID lst_id
    (63) lst_id -> . COMMA lst_id
    (64) lst_id -> . EMPTY
    (68) EMPTY -> .

    ID              shift and go to state 17
    COMMA           shift and go to state 18
    DOUBLEPOINT     reduce using rule 68 (EMPTY -> .)

    lst_id                         shift and go to state 22
    EMPTY                          shift and go to state 23

state 18

    (63) lst_id -> COMMA . lst_id
    (62) lst_id -> . ID lst_id
    (63) lst_id -> . COMMA lst_id
    (64) lst_id -> . EMPTY
    (68) EMPTY -> .

    ID              shift and go to state 17
    COMMA           shift and go to state 18
    DOUBLEPOINT     reduce using rule 68 (EMPTY -> .)

    lst_id                         shift and go to state 24
    EMPTY                          shift and go to state 23

state 19

    (4) func_create -> funcs func_create .

    END             reduce using rule 4 (func_create -> funcs func_create .)


state 20

    (21) funcs -> VOID ID . LPAR func_vars RPAR body SEMICOMMA

    LPAR            shift and go to state 25


state 21

    (60) lst_var -> lst_id DOUBLEPOINT . type SEMICOMMA
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . VOID

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    VOID            shift and go to state 29

    type                           shift and go to state 26

state 22

    (62) lst_id -> ID lst_id .

    DOUBLEPOINT     reduce using rule 62 (lst_id -> ID lst_id .)


state 23

    (64) lst_id -> EMPTY .

    DOUBLEPOINT     reduce using rule 64 (lst_id -> EMPTY .)


state 24

    (63) lst_id -> COMMA lst_id .

    DOUBLEPOINT     reduce using rule 63 (lst_id -> COMMA lst_id .)


state 25

    (21) funcs -> VOID ID LPAR . func_vars RPAR body SEMICOMMA
    (22) func_vars -> . ID DOUBLEPOINT type COMMA func_vars
    (23) func_vars -> . EMPTY
    (68) EMPTY -> .

    ID              shift and go to state 30
    RPAR            reduce using rule 68 (EMPTY -> .)

    func_vars                      shift and go to state 31
    EMPTY                          shift and go to state 32

state 26

    (60) lst_var -> lst_id DOUBLEPOINT type . SEMICOMMA

    SEMICOMMA       shift and go to state 33


state 27

    (65) type -> INT .

    SEMICOMMA       reduce using rule 65 (type -> INT .)
    COMMA           reduce using rule 65 (type -> INT .)


state 28

    (66) type -> FLOAT .

    SEMICOMMA       reduce using rule 66 (type -> FLOAT .)
    COMMA           reduce using rule 66 (type -> FLOAT .)


state 29

    (67) type -> VOID .

    SEMICOMMA       reduce using rule 67 (type -> VOID .)
    COMMA           reduce using rule 67 (type -> VOID .)


state 30

    (22) func_vars -> ID . DOUBLEPOINT type COMMA func_vars

    DOUBLEPOINT     shift and go to state 34


state 31

    (21) funcs -> VOID ID LPAR func_vars . RPAR body SEMICOMMA

    RPAR            shift and go to state 35


state 32

    (23) func_vars -> EMPTY .

    RPAR            reduce using rule 23 (func_vars -> EMPTY .)


state 33

    (60) lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .

    VOID            reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    END             reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    ID              reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    IF              reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    PRINT           reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    VAR             reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    RBRACE          reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    COMMA           reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    RPAR            reduce using rule 60 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)


state 34

    (22) func_vars -> ID DOUBLEPOINT . type COMMA func_vars
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . VOID

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    VOID            shift and go to state 29

    type                           shift and go to state 36

state 35

    (21) funcs -> VOID ID LPAR func_vars RPAR . body SEMICOMMA
    (6) body -> . LBRACE statment RBRACE

    LBRACE          shift and go to state 38

    body                           shift and go to state 37

state 36

    (22) func_vars -> ID DOUBLEPOINT type . COMMA func_vars

    COMMA           shift and go to state 39


state 37

    (21) funcs -> VOID ID LPAR func_vars RPAR body . SEMICOMMA

    SEMICOMMA       shift and go to state 40


state 38

    (6) body -> LBRACE . statment RBRACE
    (7) statment -> . assign statment
    (8) statment -> . assign
    (9) statment -> . conditions
    (10) statment -> . conditions statment
    (11) statment -> . fcall
    (12) statment -> . fcall statment
    (13) statment -> . imprimir statment
    (14) statment -> . imprimir
    (15) statment -> . vars
    (16) statment -> . vars statment
    (17) assign -> . ID EQ expression SEMICOMMA
    (18) assign -> . ID EQ cte SEMICOMMA
    (49) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (40) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (52) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (59) vars -> . VAR lst_var

    ID              shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    VAR             shift and go to state 8

    statment                       shift and go to state 41
    assign                         shift and go to state 42
    conditions                     shift and go to state 43
    fcall                          shift and go to state 44
    imprimir                       shift and go to state 45
    vars                           shift and go to state 46

state 39

    (22) func_vars -> ID DOUBLEPOINT type COMMA . func_vars
    (22) func_vars -> . ID DOUBLEPOINT type COMMA func_vars
    (23) func_vars -> . EMPTY
    (68) EMPTY -> .

    ID              shift and go to state 30
    RPAR            reduce using rule 68 (EMPTY -> .)

    func_vars                      shift and go to state 50
    EMPTY                          shift and go to state 32

state 40

    (21) funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA .

    VOID            reduce using rule 21 (funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA .)
    END             reduce using rule 21 (funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA .)


state 41

    (6) body -> LBRACE statment . RBRACE

    RBRACE          shift and go to state 51


state 42

    (7) statment -> assign . statment
    (8) statment -> assign .
    (7) statment -> . assign statment
    (8) statment -> . assign
    (9) statment -> . conditions
    (10) statment -> . conditions statment
    (11) statment -> . fcall
    (12) statment -> . fcall statment
    (13) statment -> . imprimir statment
    (14) statment -> . imprimir
    (15) statment -> . vars
    (16) statment -> . vars statment
    (17) assign -> . ID EQ expression SEMICOMMA
    (18) assign -> . ID EQ cte SEMICOMMA
    (49) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (40) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (52) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (59) vars -> . VAR lst_var

    RBRACE          reduce using rule 8 (statment -> assign .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    VAR             shift and go to state 8

    assign                         shift and go to state 42
    statment                       shift and go to state 52
    conditions                     shift and go to state 43
    fcall                          shift and go to state 44
    imprimir                       shift and go to state 45
    vars                           shift and go to state 46

state 43

    (9) statment -> conditions .
    (10) statment -> conditions . statment
    (7) statment -> . assign statment
    (8) statment -> . assign
    (9) statment -> . conditions
    (10) statment -> . conditions statment
    (11) statment -> . fcall
    (12) statment -> . fcall statment
    (13) statment -> . imprimir statment
    (14) statment -> . imprimir
    (15) statment -> . vars
    (16) statment -> . vars statment
    (17) assign -> . ID EQ expression SEMICOMMA
    (18) assign -> . ID EQ cte SEMICOMMA
    (49) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (40) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (52) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (59) vars -> . VAR lst_var

    RBRACE          reduce using rule 9 (statment -> conditions .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    VAR             shift and go to state 8

    conditions                     shift and go to state 43
    statment                       shift and go to state 53
    assign                         shift and go to state 42
    fcall                          shift and go to state 44
    imprimir                       shift and go to state 45
    vars                           shift and go to state 46

state 44

    (11) statment -> fcall .
    (12) statment -> fcall . statment
    (7) statment -> . assign statment
    (8) statment -> . assign
    (9) statment -> . conditions
    (10) statment -> . conditions statment
    (11) statment -> . fcall
    (12) statment -> . fcall statment
    (13) statment -> . imprimir statment
    (14) statment -> . imprimir
    (15) statment -> . vars
    (16) statment -> . vars statment
    (17) assign -> . ID EQ expression SEMICOMMA
    (18) assign -> . ID EQ cte SEMICOMMA
    (49) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (40) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (52) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (59) vars -> . VAR lst_var

    RBRACE          reduce using rule 11 (statment -> fcall .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    VAR             shift and go to state 8

    fcall                          shift and go to state 44
    statment                       shift and go to state 54
    assign                         shift and go to state 42
    conditions                     shift and go to state 43
    imprimir                       shift and go to state 45
    vars                           shift and go to state 46

state 45

    (13) statment -> imprimir . statment
    (14) statment -> imprimir .
    (7) statment -> . assign statment
    (8) statment -> . assign
    (9) statment -> . conditions
    (10) statment -> . conditions statment
    (11) statment -> . fcall
    (12) statment -> . fcall statment
    (13) statment -> . imprimir statment
    (14) statment -> . imprimir
    (15) statment -> . vars
    (16) statment -> . vars statment
    (17) assign -> . ID EQ expression SEMICOMMA
    (18) assign -> . ID EQ cte SEMICOMMA
    (49) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (40) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (52) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (59) vars -> . VAR lst_var

    RBRACE          reduce using rule 14 (statment -> imprimir .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    VAR             shift and go to state 8

    imprimir                       shift and go to state 45
    statment                       shift and go to state 55
    assign                         shift and go to state 42
    conditions                     shift and go to state 43
    fcall                          shift and go to state 44
    vars                           shift and go to state 46

state 46

    (15) statment -> vars .
    (16) statment -> vars . statment
    (7) statment -> . assign statment
    (8) statment -> . assign
    (9) statment -> . conditions
    (10) statment -> . conditions statment
    (11) statment -> . fcall
    (12) statment -> . fcall statment
    (13) statment -> . imprimir statment
    (14) statment -> . imprimir
    (15) statment -> . vars
    (16) statment -> . vars statment
    (17) assign -> . ID EQ expression SEMICOMMA
    (18) assign -> . ID EQ cte SEMICOMMA
    (49) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (40) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (52) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (59) vars -> . VAR lst_var

    RBRACE          reduce using rule 15 (statment -> vars .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    VAR             shift and go to state 8

    vars                           shift and go to state 46
    statment                       shift and go to state 56
    assign                         shift and go to state 42
    conditions                     shift and go to state 43
    fcall                          shift and go to state 44
    imprimir                       shift and go to state 45

state 47

    (17) assign -> ID . EQ expression SEMICOMMA
    (18) assign -> ID . EQ cte SEMICOMMA
    (40) fcall -> ID . LPAR list_exp RPAR SEMICOMMA

    EQ              shift and go to state 57
    LPAR            shift and go to state 58


state 48

    (49) conditions -> IF . LPAR expression RPAR body haselse SEMICOMMA

    LPAR            shift and go to state 59


state 49

    (52) imprimir -> PRINT . LPAR lst_printing_options RPAR SEMICOMMA

    LPAR            shift and go to state 60


state 50

    (22) func_vars -> ID DOUBLEPOINT type COMMA func_vars .

    RPAR            reduce using rule 22 (func_vars -> ID DOUBLEPOINT type COMMA func_vars .)


state 51

    (6) body -> LBRACE statment RBRACE .

    SEMICOMMA       reduce using rule 6 (body -> LBRACE statment RBRACE .)
    ELSE            reduce using rule 6 (body -> LBRACE statment RBRACE .)


state 52

    (7) statment -> assign statment .

    RBRACE          reduce using rule 7 (statment -> assign statment .)


state 53

    (10) statment -> conditions statment .

    RBRACE          reduce using rule 10 (statment -> conditions statment .)


state 54

    (12) statment -> fcall statment .

    RBRACE          reduce using rule 12 (statment -> fcall statment .)


state 55

    (13) statment -> imprimir statment .

    RBRACE          reduce using rule 13 (statment -> imprimir statment .)


state 56

    (16) statment -> vars statment .

    RBRACE          reduce using rule 16 (statment -> vars statment .)


state 57

    (17) assign -> ID EQ . expression SEMICOMMA
    (18) assign -> ID EQ . cte SEMICOMMA
    (24) expression -> . exp op
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    expression                     shift and go to state 62
    cte                            shift and go to state 63
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74

state 58

    (40) fcall -> ID LPAR . list_exp RPAR SEMICOMMA
    (41) list_exp -> . expression list_exp
    (42) list_exp -> . EMPTY
    (43) list_exp -> . COMMA list_exp
    (24) expression -> . exp op
    (68) EMPTY -> .
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    COMMA           shift and go to state 78
    RPAR            reduce using rule 68 (EMPTY -> .)
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    list_exp                       shift and go to state 75
    expression                     shift and go to state 76
    EMPTY                          shift and go to state 77
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    cte                            shift and go to state 79

state 59

    (49) conditions -> IF LPAR . expression RPAR body haselse SEMICOMMA
    (24) expression -> . exp op
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    expression                     shift and go to state 80
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 60

    (52) imprimir -> PRINT LPAR . lst_printing_options RPAR SEMICOMMA
    (53) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (54) lst_printing_options -> . expression
    (55) lst_printing_options -> . expression COMMA lst_printing_options
    (56) lst_printing_options -> . vars
    (57) lst_printing_options -> . vars COMMA lst_printing_options
    (58) lst_printing_options -> . CTE_STRING
    (24) expression -> . exp op
    (59) vars -> . VAR lst_var
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 82
    VAR             shift and go to state 8
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    lst_printing_options           shift and go to state 81
    expression                     shift and go to state 83
    vars                           shift and go to state 84
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 61

    (47) id_cte -> ID .

    TIMES           reduce using rule 47 (id_cte -> ID .)
    DIVIDE          reduce using rule 47 (id_cte -> ID .)
    PLUS            reduce using rule 47 (id_cte -> ID .)
    MINUS           reduce using rule 47 (id_cte -> ID .)
    GT              reduce using rule 47 (id_cte -> ID .)
    GTE             reduce using rule 47 (id_cte -> ID .)
    LT              reduce using rule 47 (id_cte -> ID .)
    LTE             reduce using rule 47 (id_cte -> ID .)
    NT              reduce using rule 47 (id_cte -> ID .)
    SEMICOMMA       reduce using rule 47 (id_cte -> ID .)
    COMMA           reduce using rule 47 (id_cte -> ID .)
    LPAR            reduce using rule 47 (id_cte -> ID .)
    ID              reduce using rule 47 (id_cte -> ID .)
    CTE_INT         reduce using rule 47 (id_cte -> ID .)
    CTE_FLOAT       reduce using rule 47 (id_cte -> ID .)
    RPAR            reduce using rule 47 (id_cte -> ID .)


state 62

    (17) assign -> ID EQ expression . SEMICOMMA

    SEMICOMMA       shift and go to state 85


state 63

    (18) assign -> ID EQ cte . SEMICOMMA
    (48) id_cte -> cte .

  ! shift/reduce conflict for SEMICOMMA resolved as shift
    SEMICOMMA       shift and go to state 86
    TIMES           reduce using rule 48 (id_cte -> cte .)
    DIVIDE          reduce using rule 48 (id_cte -> cte .)
    PLUS            reduce using rule 48 (id_cte -> cte .)
    MINUS           reduce using rule 48 (id_cte -> cte .)
    GT              reduce using rule 48 (id_cte -> cte .)
    GTE             reduce using rule 48 (id_cte -> cte .)
    LT              reduce using rule 48 (id_cte -> cte .)
    LTE             reduce using rule 48 (id_cte -> cte .)
    NT              reduce using rule 48 (id_cte -> cte .)

  ! SEMICOMMA       [ reduce using rule 48 (id_cte -> cte .) ]


state 64

    (24) expression -> exp . op
    (25) op -> . GT exp
    (26) op -> . GTE exp
    (27) op -> . LT exp
    (28) op -> . LTE exp
    (29) op -> . NT exp
    (30) op -> . EMPTY
    (68) EMPTY -> .

    GT              shift and go to state 88
    GTE             shift and go to state 89
    LT              shift and go to state 90
    LTE             shift and go to state 91
    NT              shift and go to state 92
    SEMICOMMA       reduce using rule 68 (EMPTY -> .)
    COMMA           reduce using rule 68 (EMPTY -> .)
    LPAR            reduce using rule 68 (EMPTY -> .)
    PLUS            reduce using rule 68 (EMPTY -> .)
    MINUS           reduce using rule 68 (EMPTY -> .)
    ID              reduce using rule 68 (EMPTY -> .)
    CTE_INT         reduce using rule 68 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 68 (EMPTY -> .)
    RPAR            reduce using rule 68 (EMPTY -> .)

    op                             shift and go to state 87
    EMPTY                          shift and go to state 93

state 65

    (19) cte -> CTE_INT .

    SEMICOMMA       reduce using rule 19 (cte -> CTE_INT .)
    TIMES           reduce using rule 19 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 19 (cte -> CTE_INT .)
    PLUS            reduce using rule 19 (cte -> CTE_INT .)
    MINUS           reduce using rule 19 (cte -> CTE_INT .)
    GT              reduce using rule 19 (cte -> CTE_INT .)
    GTE             reduce using rule 19 (cte -> CTE_INT .)
    LT              reduce using rule 19 (cte -> CTE_INT .)
    LTE             reduce using rule 19 (cte -> CTE_INT .)
    NT              reduce using rule 19 (cte -> CTE_INT .)
    COMMA           reduce using rule 19 (cte -> CTE_INT .)
    LPAR            reduce using rule 19 (cte -> CTE_INT .)
    ID              reduce using rule 19 (cte -> CTE_INT .)
    CTE_INT         reduce using rule 19 (cte -> CTE_INT .)
    CTE_FLOAT       reduce using rule 19 (cte -> CTE_INT .)
    RPAR            reduce using rule 19 (cte -> CTE_INT .)


state 66

    (20) cte -> CTE_FLOAT .

    SEMICOMMA       reduce using rule 20 (cte -> CTE_FLOAT .)
    TIMES           reduce using rule 20 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 20 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 20 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 20 (cte -> CTE_FLOAT .)
    GT              reduce using rule 20 (cte -> CTE_FLOAT .)
    GTE             reduce using rule 20 (cte -> CTE_FLOAT .)
    LT              reduce using rule 20 (cte -> CTE_FLOAT .)
    LTE             reduce using rule 20 (cte -> CTE_FLOAT .)
    NT              reduce using rule 20 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 20 (cte -> CTE_FLOAT .)
    LPAR            reduce using rule 20 (cte -> CTE_FLOAT .)
    ID              reduce using rule 20 (cte -> CTE_FLOAT .)
    CTE_INT         reduce using rule 20 (cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 20 (cte -> CTE_FLOAT .)
    RPAR            reduce using rule 20 (cte -> CTE_FLOAT .)


state 67

    (31) exp -> termino . lopb
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (68) EMPTY -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    GT              reduce using rule 68 (EMPTY -> .)
    GTE             reduce using rule 68 (EMPTY -> .)
    LT              reduce using rule 68 (EMPTY -> .)
    LTE             reduce using rule 68 (EMPTY -> .)
    NT              reduce using rule 68 (EMPTY -> .)
    SEMICOMMA       reduce using rule 68 (EMPTY -> .)
    COMMA           reduce using rule 68 (EMPTY -> .)
    LPAR            reduce using rule 68 (EMPTY -> .)
    ID              reduce using rule 68 (EMPTY -> .)
    CTE_INT         reduce using rule 68 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 68 (EMPTY -> .)
    RPAR            reduce using rule 68 (EMPTY -> .)

  ! PLUS            [ reduce using rule 68 (EMPTY -> .) ]
  ! MINUS           [ reduce using rule 68 (EMPTY -> .) ]

    lopb                           shift and go to state 94
    EMPTY                          shift and go to state 74

state 68

    (45) factor -> lopb . id_cte
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

    id_cte                         shift and go to state 95
    cte                            shift and go to state 79

state 69

    (35) termino -> factor . lopa
    (36) lopa -> . TIMES factor
    (37) lopa -> . DIVIDE factor
    (38) lopa -> . EMPTY
    (68) EMPTY -> .

    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    PLUS            reduce using rule 68 (EMPTY -> .)
    MINUS           reduce using rule 68 (EMPTY -> .)
    GT              reduce using rule 68 (EMPTY -> .)
    GTE             reduce using rule 68 (EMPTY -> .)
    LT              reduce using rule 68 (EMPTY -> .)
    LTE             reduce using rule 68 (EMPTY -> .)
    NT              reduce using rule 68 (EMPTY -> .)
    SEMICOMMA       reduce using rule 68 (EMPTY -> .)
    COMMA           reduce using rule 68 (EMPTY -> .)
    LPAR            reduce using rule 68 (EMPTY -> .)
    ID              reduce using rule 68 (EMPTY -> .)
    CTE_INT         reduce using rule 68 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 68 (EMPTY -> .)
    RPAR            reduce using rule 68 (EMPTY -> .)

    lopa                           shift and go to state 96
    EMPTY                          shift and go to state 99

state 70

    (44) factor -> LPAR . expression RPAR
    (24) expression -> . exp op
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    expression                     shift and go to state 100
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 71

    (46) factor -> id_cte .

    TIMES           reduce using rule 46 (factor -> id_cte .)
    DIVIDE          reduce using rule 46 (factor -> id_cte .)
    PLUS            reduce using rule 46 (factor -> id_cte .)
    MINUS           reduce using rule 46 (factor -> id_cte .)
    GT              reduce using rule 46 (factor -> id_cte .)
    GTE             reduce using rule 46 (factor -> id_cte .)
    LT              reduce using rule 46 (factor -> id_cte .)
    LTE             reduce using rule 46 (factor -> id_cte .)
    NT              reduce using rule 46 (factor -> id_cte .)
    SEMICOMMA       reduce using rule 46 (factor -> id_cte .)
    COMMA           reduce using rule 46 (factor -> id_cte .)
    LPAR            reduce using rule 46 (factor -> id_cte .)
    ID              reduce using rule 46 (factor -> id_cte .)
    CTE_INT         reduce using rule 46 (factor -> id_cte .)
    CTE_FLOAT       reduce using rule 46 (factor -> id_cte .)
    RPAR            reduce using rule 46 (factor -> id_cte .)


state 72

    (32) lopb -> PLUS . termino
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    termino                        shift and go to state 101
    factor                         shift and go to state 69
    lopb                           shift and go to state 68
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 73

    (33) lopb -> MINUS . termino
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    termino                        shift and go to state 102
    factor                         shift and go to state 69
    lopb                           shift and go to state 68
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 74

    (34) lopb -> EMPTY .

    ID              reduce using rule 34 (lopb -> EMPTY .)
    CTE_INT         reduce using rule 34 (lopb -> EMPTY .)
    CTE_FLOAT       reduce using rule 34 (lopb -> EMPTY .)
    GT              reduce using rule 34 (lopb -> EMPTY .)
    GTE             reduce using rule 34 (lopb -> EMPTY .)
    LT              reduce using rule 34 (lopb -> EMPTY .)
    LTE             reduce using rule 34 (lopb -> EMPTY .)
    NT              reduce using rule 34 (lopb -> EMPTY .)
    SEMICOMMA       reduce using rule 34 (lopb -> EMPTY .)
    COMMA           reduce using rule 34 (lopb -> EMPTY .)
    LPAR            reduce using rule 34 (lopb -> EMPTY .)
    PLUS            reduce using rule 34 (lopb -> EMPTY .)
    MINUS           reduce using rule 34 (lopb -> EMPTY .)
    RPAR            reduce using rule 34 (lopb -> EMPTY .)


state 75

    (40) fcall -> ID LPAR list_exp . RPAR SEMICOMMA

    RPAR            shift and go to state 103


state 76

    (41) list_exp -> expression . list_exp
    (41) list_exp -> . expression list_exp
    (42) list_exp -> . EMPTY
    (43) list_exp -> . COMMA list_exp
    (24) expression -> . exp op
    (68) EMPTY -> .
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    COMMA           shift and go to state 78
    RPAR            reduce using rule 68 (EMPTY -> .)
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    expression                     shift and go to state 76
    list_exp                       shift and go to state 104
    EMPTY                          shift and go to state 77
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    cte                            shift and go to state 79

state 77

    (42) list_exp -> EMPTY .
    (34) lopb -> EMPTY .

    RPAR            reduce using rule 42 (list_exp -> EMPTY .)
    ID              reduce using rule 34 (lopb -> EMPTY .)
    CTE_INT         reduce using rule 34 (lopb -> EMPTY .)
    CTE_FLOAT       reduce using rule 34 (lopb -> EMPTY .)


state 78

    (43) list_exp -> COMMA . list_exp
    (41) list_exp -> . expression list_exp
    (42) list_exp -> . EMPTY
    (43) list_exp -> . COMMA list_exp
    (24) expression -> . exp op
    (68) EMPTY -> .
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    COMMA           shift and go to state 78
    RPAR            reduce using rule 68 (EMPTY -> .)
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    list_exp                       shift and go to state 105
    expression                     shift and go to state 76
    EMPTY                          shift and go to state 77
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    cte                            shift and go to state 79

state 79

    (48) id_cte -> cte .

    TIMES           reduce using rule 48 (id_cte -> cte .)
    DIVIDE          reduce using rule 48 (id_cte -> cte .)
    PLUS            reduce using rule 48 (id_cte -> cte .)
    MINUS           reduce using rule 48 (id_cte -> cte .)
    GT              reduce using rule 48 (id_cte -> cte .)
    GTE             reduce using rule 48 (id_cte -> cte .)
    LT              reduce using rule 48 (id_cte -> cte .)
    LTE             reduce using rule 48 (id_cte -> cte .)
    NT              reduce using rule 48 (id_cte -> cte .)
    COMMA           reduce using rule 48 (id_cte -> cte .)
    LPAR            reduce using rule 48 (id_cte -> cte .)
    ID              reduce using rule 48 (id_cte -> cte .)
    CTE_INT         reduce using rule 48 (id_cte -> cte .)
    CTE_FLOAT       reduce using rule 48 (id_cte -> cte .)
    RPAR            reduce using rule 48 (id_cte -> cte .)
    SEMICOMMA       reduce using rule 48 (id_cte -> cte .)


state 80

    (49) conditions -> IF LPAR expression . RPAR body haselse SEMICOMMA

    RPAR            shift and go to state 106


state 81

    (52) imprimir -> PRINT LPAR lst_printing_options . RPAR SEMICOMMA

    RPAR            shift and go to state 107


state 82

    (53) lst_printing_options -> CTE_STRING . COMMA lst_printing_options
    (58) lst_printing_options -> CTE_STRING .

    COMMA           shift and go to state 108
    RPAR            reduce using rule 58 (lst_printing_options -> CTE_STRING .)


state 83

    (54) lst_printing_options -> expression .
    (55) lst_printing_options -> expression . COMMA lst_printing_options

    RPAR            reduce using rule 54 (lst_printing_options -> expression .)
    COMMA           shift and go to state 109


state 84

    (56) lst_printing_options -> vars .
    (57) lst_printing_options -> vars . COMMA lst_printing_options

    RPAR            reduce using rule 56 (lst_printing_options -> vars .)
    COMMA           shift and go to state 110


state 85

    (17) assign -> ID EQ expression SEMICOMMA .

    ID              reduce using rule 17 (assign -> ID EQ expression SEMICOMMA .)
    IF              reduce using rule 17 (assign -> ID EQ expression SEMICOMMA .)
    PRINT           reduce using rule 17 (assign -> ID EQ expression SEMICOMMA .)
    VAR             reduce using rule 17 (assign -> ID EQ expression SEMICOMMA .)
    RBRACE          reduce using rule 17 (assign -> ID EQ expression SEMICOMMA .)


state 86

    (18) assign -> ID EQ cte SEMICOMMA .

    ID              reduce using rule 18 (assign -> ID EQ cte SEMICOMMA .)
    IF              reduce using rule 18 (assign -> ID EQ cte SEMICOMMA .)
    PRINT           reduce using rule 18 (assign -> ID EQ cte SEMICOMMA .)
    VAR             reduce using rule 18 (assign -> ID EQ cte SEMICOMMA .)
    RBRACE          reduce using rule 18 (assign -> ID EQ cte SEMICOMMA .)


state 87

    (24) expression -> exp op .

    SEMICOMMA       reduce using rule 24 (expression -> exp op .)
    COMMA           reduce using rule 24 (expression -> exp op .)
    LPAR            reduce using rule 24 (expression -> exp op .)
    PLUS            reduce using rule 24 (expression -> exp op .)
    MINUS           reduce using rule 24 (expression -> exp op .)
    ID              reduce using rule 24 (expression -> exp op .)
    CTE_INT         reduce using rule 24 (expression -> exp op .)
    CTE_FLOAT       reduce using rule 24 (expression -> exp op .)
    RPAR            reduce using rule 24 (expression -> exp op .)


state 88

    (25) op -> GT . exp
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    exp                            shift and go to state 111
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 89

    (26) op -> GTE . exp
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    exp                            shift and go to state 112
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 90

    (27) op -> LT . exp
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    exp                            shift and go to state 113
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 91

    (28) op -> LTE . exp
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    exp                            shift and go to state 114
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 92

    (29) op -> NT . exp
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    exp                            shift and go to state 115
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 93

    (30) op -> EMPTY .

    SEMICOMMA       reduce using rule 30 (op -> EMPTY .)
    COMMA           reduce using rule 30 (op -> EMPTY .)
    LPAR            reduce using rule 30 (op -> EMPTY .)
    PLUS            reduce using rule 30 (op -> EMPTY .)
    MINUS           reduce using rule 30 (op -> EMPTY .)
    ID              reduce using rule 30 (op -> EMPTY .)
    CTE_INT         reduce using rule 30 (op -> EMPTY .)
    CTE_FLOAT       reduce using rule 30 (op -> EMPTY .)
    RPAR            reduce using rule 30 (op -> EMPTY .)


state 94

    (31) exp -> termino lopb .

    GT              reduce using rule 31 (exp -> termino lopb .)
    GTE             reduce using rule 31 (exp -> termino lopb .)
    LT              reduce using rule 31 (exp -> termino lopb .)
    LTE             reduce using rule 31 (exp -> termino lopb .)
    NT              reduce using rule 31 (exp -> termino lopb .)
    SEMICOMMA       reduce using rule 31 (exp -> termino lopb .)
    COMMA           reduce using rule 31 (exp -> termino lopb .)
    LPAR            reduce using rule 31 (exp -> termino lopb .)
    PLUS            reduce using rule 31 (exp -> termino lopb .)
    MINUS           reduce using rule 31 (exp -> termino lopb .)
    ID              reduce using rule 31 (exp -> termino lopb .)
    CTE_INT         reduce using rule 31 (exp -> termino lopb .)
    CTE_FLOAT       reduce using rule 31 (exp -> termino lopb .)
    RPAR            reduce using rule 31 (exp -> termino lopb .)


state 95

    (45) factor -> lopb id_cte .

    TIMES           reduce using rule 45 (factor -> lopb id_cte .)
    DIVIDE          reduce using rule 45 (factor -> lopb id_cte .)
    PLUS            reduce using rule 45 (factor -> lopb id_cte .)
    MINUS           reduce using rule 45 (factor -> lopb id_cte .)
    GT              reduce using rule 45 (factor -> lopb id_cte .)
    GTE             reduce using rule 45 (factor -> lopb id_cte .)
    LT              reduce using rule 45 (factor -> lopb id_cte .)
    LTE             reduce using rule 45 (factor -> lopb id_cte .)
    NT              reduce using rule 45 (factor -> lopb id_cte .)
    SEMICOMMA       reduce using rule 45 (factor -> lopb id_cte .)
    COMMA           reduce using rule 45 (factor -> lopb id_cte .)
    LPAR            reduce using rule 45 (factor -> lopb id_cte .)
    ID              reduce using rule 45 (factor -> lopb id_cte .)
    CTE_INT         reduce using rule 45 (factor -> lopb id_cte .)
    CTE_FLOAT       reduce using rule 45 (factor -> lopb id_cte .)
    RPAR            reduce using rule 45 (factor -> lopb id_cte .)


state 96

    (35) termino -> factor lopa .

    PLUS            reduce using rule 35 (termino -> factor lopa .)
    MINUS           reduce using rule 35 (termino -> factor lopa .)
    GT              reduce using rule 35 (termino -> factor lopa .)
    GTE             reduce using rule 35 (termino -> factor lopa .)
    LT              reduce using rule 35 (termino -> factor lopa .)
    LTE             reduce using rule 35 (termino -> factor lopa .)
    NT              reduce using rule 35 (termino -> factor lopa .)
    SEMICOMMA       reduce using rule 35 (termino -> factor lopa .)
    COMMA           reduce using rule 35 (termino -> factor lopa .)
    LPAR            reduce using rule 35 (termino -> factor lopa .)
    ID              reduce using rule 35 (termino -> factor lopa .)
    CTE_INT         reduce using rule 35 (termino -> factor lopa .)
    CTE_FLOAT       reduce using rule 35 (termino -> factor lopa .)
    RPAR            reduce using rule 35 (termino -> factor lopa .)


state 97

    (36) lopa -> TIMES . factor
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    factor                         shift and go to state 116
    lopb                           shift and go to state 68
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 98

    (37) lopa -> DIVIDE . factor
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    factor                         shift and go to state 117
    lopb                           shift and go to state 68
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 99

    (38) lopa -> EMPTY .

    PLUS            reduce using rule 38 (lopa -> EMPTY .)
    MINUS           reduce using rule 38 (lopa -> EMPTY .)
    GT              reduce using rule 38 (lopa -> EMPTY .)
    GTE             reduce using rule 38 (lopa -> EMPTY .)
    LT              reduce using rule 38 (lopa -> EMPTY .)
    LTE             reduce using rule 38 (lopa -> EMPTY .)
    NT              reduce using rule 38 (lopa -> EMPTY .)
    SEMICOMMA       reduce using rule 38 (lopa -> EMPTY .)
    COMMA           reduce using rule 38 (lopa -> EMPTY .)
    LPAR            reduce using rule 38 (lopa -> EMPTY .)
    ID              reduce using rule 38 (lopa -> EMPTY .)
    CTE_INT         reduce using rule 38 (lopa -> EMPTY .)
    CTE_FLOAT       reduce using rule 38 (lopa -> EMPTY .)
    RPAR            reduce using rule 38 (lopa -> EMPTY .)


state 100

    (44) factor -> LPAR expression . RPAR

    RPAR            shift and go to state 118


state 101

    (32) lopb -> PLUS termino .

    ID              reduce using rule 32 (lopb -> PLUS termino .)
    CTE_INT         reduce using rule 32 (lopb -> PLUS termino .)
    CTE_FLOAT       reduce using rule 32 (lopb -> PLUS termino .)
    GT              reduce using rule 32 (lopb -> PLUS termino .)
    GTE             reduce using rule 32 (lopb -> PLUS termino .)
    LT              reduce using rule 32 (lopb -> PLUS termino .)
    LTE             reduce using rule 32 (lopb -> PLUS termino .)
    NT              reduce using rule 32 (lopb -> PLUS termino .)
    SEMICOMMA       reduce using rule 32 (lopb -> PLUS termino .)
    COMMA           reduce using rule 32 (lopb -> PLUS termino .)
    LPAR            reduce using rule 32 (lopb -> PLUS termino .)
    PLUS            reduce using rule 32 (lopb -> PLUS termino .)
    MINUS           reduce using rule 32 (lopb -> PLUS termino .)
    RPAR            reduce using rule 32 (lopb -> PLUS termino .)


state 102

    (33) lopb -> MINUS termino .

    ID              reduce using rule 33 (lopb -> MINUS termino .)
    CTE_INT         reduce using rule 33 (lopb -> MINUS termino .)
    CTE_FLOAT       reduce using rule 33 (lopb -> MINUS termino .)
    GT              reduce using rule 33 (lopb -> MINUS termino .)
    GTE             reduce using rule 33 (lopb -> MINUS termino .)
    LT              reduce using rule 33 (lopb -> MINUS termino .)
    LTE             reduce using rule 33 (lopb -> MINUS termino .)
    NT              reduce using rule 33 (lopb -> MINUS termino .)
    SEMICOMMA       reduce using rule 33 (lopb -> MINUS termino .)
    COMMA           reduce using rule 33 (lopb -> MINUS termino .)
    LPAR            reduce using rule 33 (lopb -> MINUS termino .)
    PLUS            reduce using rule 33 (lopb -> MINUS termino .)
    MINUS           reduce using rule 33 (lopb -> MINUS termino .)
    RPAR            reduce using rule 33 (lopb -> MINUS termino .)


state 103

    (40) fcall -> ID LPAR list_exp RPAR . SEMICOMMA

    SEMICOMMA       shift and go to state 119


state 104

    (41) list_exp -> expression list_exp .

    RPAR            reduce using rule 41 (list_exp -> expression list_exp .)


state 105

    (43) list_exp -> COMMA list_exp .

    RPAR            reduce using rule 43 (list_exp -> COMMA list_exp .)


state 106

    (49) conditions -> IF LPAR expression RPAR . body haselse SEMICOMMA
    (6) body -> . LBRACE statment RBRACE

    LBRACE          shift and go to state 38

    body                           shift and go to state 120

state 107

    (52) imprimir -> PRINT LPAR lst_printing_options RPAR . SEMICOMMA

    SEMICOMMA       shift and go to state 121


state 108

    (53) lst_printing_options -> CTE_STRING COMMA . lst_printing_options
    (53) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (54) lst_printing_options -> . expression
    (55) lst_printing_options -> . expression COMMA lst_printing_options
    (56) lst_printing_options -> . vars
    (57) lst_printing_options -> . vars COMMA lst_printing_options
    (58) lst_printing_options -> . CTE_STRING
    (24) expression -> . exp op
    (59) vars -> . VAR lst_var
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 82
    VAR             shift and go to state 8
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    lst_printing_options           shift and go to state 122
    expression                     shift and go to state 83
    vars                           shift and go to state 84
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 109

    (55) lst_printing_options -> expression COMMA . lst_printing_options
    (53) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (54) lst_printing_options -> . expression
    (55) lst_printing_options -> . expression COMMA lst_printing_options
    (56) lst_printing_options -> . vars
    (57) lst_printing_options -> . vars COMMA lst_printing_options
    (58) lst_printing_options -> . CTE_STRING
    (24) expression -> . exp op
    (59) vars -> . VAR lst_var
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 82
    VAR             shift and go to state 8
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    expression                     shift and go to state 83
    lst_printing_options           shift and go to state 123
    vars                           shift and go to state 84
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 110

    (57) lst_printing_options -> vars COMMA . lst_printing_options
    (53) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (54) lst_printing_options -> . expression
    (55) lst_printing_options -> . expression COMMA lst_printing_options
    (56) lst_printing_options -> . vars
    (57) lst_printing_options -> . vars COMMA lst_printing_options
    (58) lst_printing_options -> . CTE_STRING
    (24) expression -> . exp op
    (59) vars -> . VAR lst_var
    (31) exp -> . termino lopb
    (35) termino -> . factor lopa
    (44) factor -> . LPAR expression RPAR
    (45) factor -> . lopb id_cte
    (46) factor -> . id_cte
    (32) lopb -> . PLUS termino
    (33) lopb -> . MINUS termino
    (34) lopb -> . EMPTY
    (47) id_cte -> . ID
    (48) id_cte -> . cte
    (68) EMPTY -> .
    (19) cte -> . CTE_INT
    (20) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 82
    VAR             shift and go to state 8
    LPAR            shift and go to state 70
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    ID              shift and go to state 61
    CTE_INT         shift and go to state 65
    CTE_FLOAT       shift and go to state 66

  ! ID              [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 68 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 68 (EMPTY -> .) ]

    vars                           shift and go to state 84
    lst_printing_options           shift and go to state 124
    expression                     shift and go to state 83
    exp                            shift and go to state 64
    termino                        shift and go to state 67
    lopb                           shift and go to state 68
    factor                         shift and go to state 69
    id_cte                         shift and go to state 71
    EMPTY                          shift and go to state 74
    cte                            shift and go to state 79

state 111

    (25) op -> GT exp .

    SEMICOMMA       reduce using rule 25 (op -> GT exp .)
    COMMA           reduce using rule 25 (op -> GT exp .)
    LPAR            reduce using rule 25 (op -> GT exp .)
    PLUS            reduce using rule 25 (op -> GT exp .)
    MINUS           reduce using rule 25 (op -> GT exp .)
    ID              reduce using rule 25 (op -> GT exp .)
    CTE_INT         reduce using rule 25 (op -> GT exp .)
    CTE_FLOAT       reduce using rule 25 (op -> GT exp .)
    RPAR            reduce using rule 25 (op -> GT exp .)


state 112

    (26) op -> GTE exp .

    SEMICOMMA       reduce using rule 26 (op -> GTE exp .)
    COMMA           reduce using rule 26 (op -> GTE exp .)
    LPAR            reduce using rule 26 (op -> GTE exp .)
    PLUS            reduce using rule 26 (op -> GTE exp .)
    MINUS           reduce using rule 26 (op -> GTE exp .)
    ID              reduce using rule 26 (op -> GTE exp .)
    CTE_INT         reduce using rule 26 (op -> GTE exp .)
    CTE_FLOAT       reduce using rule 26 (op -> GTE exp .)
    RPAR            reduce using rule 26 (op -> GTE exp .)


state 113

    (27) op -> LT exp .

    SEMICOMMA       reduce using rule 27 (op -> LT exp .)
    COMMA           reduce using rule 27 (op -> LT exp .)
    LPAR            reduce using rule 27 (op -> LT exp .)
    PLUS            reduce using rule 27 (op -> LT exp .)
    MINUS           reduce using rule 27 (op -> LT exp .)
    ID              reduce using rule 27 (op -> LT exp .)
    CTE_INT         reduce using rule 27 (op -> LT exp .)
    CTE_FLOAT       reduce using rule 27 (op -> LT exp .)
    RPAR            reduce using rule 27 (op -> LT exp .)


state 114

    (28) op -> LTE exp .

    SEMICOMMA       reduce using rule 28 (op -> LTE exp .)
    COMMA           reduce using rule 28 (op -> LTE exp .)
    LPAR            reduce using rule 28 (op -> LTE exp .)
    PLUS            reduce using rule 28 (op -> LTE exp .)
    MINUS           reduce using rule 28 (op -> LTE exp .)
    ID              reduce using rule 28 (op -> LTE exp .)
    CTE_INT         reduce using rule 28 (op -> LTE exp .)
    CTE_FLOAT       reduce using rule 28 (op -> LTE exp .)
    RPAR            reduce using rule 28 (op -> LTE exp .)


state 115

    (29) op -> NT exp .

    SEMICOMMA       reduce using rule 29 (op -> NT exp .)
    COMMA           reduce using rule 29 (op -> NT exp .)
    LPAR            reduce using rule 29 (op -> NT exp .)
    PLUS            reduce using rule 29 (op -> NT exp .)
    MINUS           reduce using rule 29 (op -> NT exp .)
    ID              reduce using rule 29 (op -> NT exp .)
    CTE_INT         reduce using rule 29 (op -> NT exp .)
    CTE_FLOAT       reduce using rule 29 (op -> NT exp .)
    RPAR            reduce using rule 29 (op -> NT exp .)


state 116

    (36) lopa -> TIMES factor .

    PLUS            reduce using rule 36 (lopa -> TIMES factor .)
    MINUS           reduce using rule 36 (lopa -> TIMES factor .)
    GT              reduce using rule 36 (lopa -> TIMES factor .)
    GTE             reduce using rule 36 (lopa -> TIMES factor .)
    LT              reduce using rule 36 (lopa -> TIMES factor .)
    LTE             reduce using rule 36 (lopa -> TIMES factor .)
    NT              reduce using rule 36 (lopa -> TIMES factor .)
    SEMICOMMA       reduce using rule 36 (lopa -> TIMES factor .)
    COMMA           reduce using rule 36 (lopa -> TIMES factor .)
    LPAR            reduce using rule 36 (lopa -> TIMES factor .)
    ID              reduce using rule 36 (lopa -> TIMES factor .)
    CTE_INT         reduce using rule 36 (lopa -> TIMES factor .)
    CTE_FLOAT       reduce using rule 36 (lopa -> TIMES factor .)
    RPAR            reduce using rule 36 (lopa -> TIMES factor .)


state 117

    (37) lopa -> DIVIDE factor .

    PLUS            reduce using rule 37 (lopa -> DIVIDE factor .)
    MINUS           reduce using rule 37 (lopa -> DIVIDE factor .)
    GT              reduce using rule 37 (lopa -> DIVIDE factor .)
    GTE             reduce using rule 37 (lopa -> DIVIDE factor .)
    LT              reduce using rule 37 (lopa -> DIVIDE factor .)
    LTE             reduce using rule 37 (lopa -> DIVIDE factor .)
    NT              reduce using rule 37 (lopa -> DIVIDE factor .)
    SEMICOMMA       reduce using rule 37 (lopa -> DIVIDE factor .)
    COMMA           reduce using rule 37 (lopa -> DIVIDE factor .)
    LPAR            reduce using rule 37 (lopa -> DIVIDE factor .)
    ID              reduce using rule 37 (lopa -> DIVIDE factor .)
    CTE_INT         reduce using rule 37 (lopa -> DIVIDE factor .)
    CTE_FLOAT       reduce using rule 37 (lopa -> DIVIDE factor .)
    RPAR            reduce using rule 37 (lopa -> DIVIDE factor .)


state 118

    (44) factor -> LPAR expression RPAR .

    TIMES           reduce using rule 44 (factor -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 44 (factor -> LPAR expression RPAR .)
    PLUS            reduce using rule 44 (factor -> LPAR expression RPAR .)
    MINUS           reduce using rule 44 (factor -> LPAR expression RPAR .)
    GT              reduce using rule 44 (factor -> LPAR expression RPAR .)
    GTE             reduce using rule 44 (factor -> LPAR expression RPAR .)
    LT              reduce using rule 44 (factor -> LPAR expression RPAR .)
    LTE             reduce using rule 44 (factor -> LPAR expression RPAR .)
    NT              reduce using rule 44 (factor -> LPAR expression RPAR .)
    SEMICOMMA       reduce using rule 44 (factor -> LPAR expression RPAR .)
    COMMA           reduce using rule 44 (factor -> LPAR expression RPAR .)
    LPAR            reduce using rule 44 (factor -> LPAR expression RPAR .)
    ID              reduce using rule 44 (factor -> LPAR expression RPAR .)
    CTE_INT         reduce using rule 44 (factor -> LPAR expression RPAR .)
    CTE_FLOAT       reduce using rule 44 (factor -> LPAR expression RPAR .)
    RPAR            reduce using rule 44 (factor -> LPAR expression RPAR .)


state 119

    (40) fcall -> ID LPAR list_exp RPAR SEMICOMMA .

    ID              reduce using rule 40 (fcall -> ID LPAR list_exp RPAR SEMICOMMA .)
    IF              reduce using rule 40 (fcall -> ID LPAR list_exp RPAR SEMICOMMA .)
    PRINT           reduce using rule 40 (fcall -> ID LPAR list_exp RPAR SEMICOMMA .)
    VAR             reduce using rule 40 (fcall -> ID LPAR list_exp RPAR SEMICOMMA .)
    RBRACE          reduce using rule 40 (fcall -> ID LPAR list_exp RPAR SEMICOMMA .)


state 120

    (49) conditions -> IF LPAR expression RPAR body . haselse SEMICOMMA
    (50) haselse -> . ELSE body
    (51) haselse -> . EMPTY
    (68) EMPTY -> .

    ELSE            shift and go to state 126
    SEMICOMMA       reduce using rule 68 (EMPTY -> .)

    haselse                        shift and go to state 125
    EMPTY                          shift and go to state 127

state 121

    (52) imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .

    ID              reduce using rule 52 (imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .)
    IF              reduce using rule 52 (imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .)
    PRINT           reduce using rule 52 (imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .)
    VAR             reduce using rule 52 (imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .)
    RBRACE          reduce using rule 52 (imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .)


state 122

    (53) lst_printing_options -> CTE_STRING COMMA lst_printing_options .

    RPAR            reduce using rule 53 (lst_printing_options -> CTE_STRING COMMA lst_printing_options .)


state 123

    (55) lst_printing_options -> expression COMMA lst_printing_options .

    RPAR            reduce using rule 55 (lst_printing_options -> expression COMMA lst_printing_options .)


state 124

    (57) lst_printing_options -> vars COMMA lst_printing_options .

    RPAR            reduce using rule 57 (lst_printing_options -> vars COMMA lst_printing_options .)


state 125

    (49) conditions -> IF LPAR expression RPAR body haselse . SEMICOMMA

    SEMICOMMA       shift and go to state 128


state 126

    (50) haselse -> ELSE . body
    (6) body -> . LBRACE statment RBRACE

    LBRACE          shift and go to state 38

    body                           shift and go to state 129

state 127

    (51) haselse -> EMPTY .

    SEMICOMMA       reduce using rule 51 (haselse -> EMPTY .)


state 128

    (49) conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .

    ID              reduce using rule 49 (conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .)
    IF              reduce using rule 49 (conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .)
    PRINT           reduce using rule 49 (conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .)
    VAR             reduce using rule 49 (conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .)
    RBRACE          reduce using rule 49 (conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .)


state 129

    (50) haselse -> ELSE body .

    SEMICOMMA       reduce using rule 50 (haselse -> ELSE body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 8 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 8 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 57 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 58 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 59 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 60 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 60 resolved as shift
WARNING: shift/reduce conflict for SEMICOMMA in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 70 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 72 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 73 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 73 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 76 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 78 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 89 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 90 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 91 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 92 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 97 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 98 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 108 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 109 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 110 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 110 resolved as shift
