Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> empezar
Rule 1     empezar -> PROGRAM ID SEMICOMMA var_or_func END
Rule 2     var_or_func -> vars func_create
Rule 3     var_or_func -> func_create
Rule 4     func_create -> funcs func_create
Rule 5     func_create -> EMPTY
Rule 6     body -> LBRACE statment RBRACE
Rule 7     statment -> assign
Rule 8     statment -> conditions
Rule 9     statment -> fcall
Rule 10    statment -> imprimir
Rule 11    statment -> vars
Rule 12    assign -> ID EQ expression SEMICOMMA
Rule 13    assign -> ID EQ cte SEMICOMMA
Rule 14    cte -> CTE_INT
Rule 15    cte -> CTE_FLOAT
Rule 16    funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA
Rule 17    func_vars -> ID DOUBLEPOINT type func_vars
Rule 18    func_vars -> EMPTY
Rule 19    func_vars -> COMMA func_vars
Rule 20    expression -> exp op
Rule 21    op -> GT exp
Rule 22    op -> GTE exp
Rule 23    op -> LT exp
Rule 24    op -> LTE exp
Rule 25    op -> NT exp
Rule 26    op -> EMPTY
Rule 27    exp -> termino lopb
Rule 28    lopb -> PLUS termino
Rule 29    lopb -> MINUS termino
Rule 30    lopb -> EMPTY
Rule 31    termino -> factor lopa
Rule 32    lopa -> TIMES factor
Rule 33    lopa -> DIVIDE factor
Rule 34    lopa -> EMPTY
Rule 35    cycle -> WHILE body DO LPAR expression RPAR SEMICOMMA
Rule 36    fcall -> ID LPAR list_exp RPAR SEMICOMMA
Rule 37    list_exp -> expression list_exp
Rule 38    list_exp -> EMPTY
Rule 39    list_exp -> COMMA list_exp
Rule 40    factor -> LPAR expression RPAR
Rule 41    factor -> lopb id_cte
Rule 42    factor -> id_cte
Rule 43    id_cte -> ID
Rule 44    id_cte -> cte
Rule 45    conditions -> IF LPAR expression RPAR body haselse SEMICOMMA
Rule 46    haselse -> ELSE body
Rule 47    haselse -> EMPTY
Rule 48    imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA
Rule 49    lst_printing_options -> CTE_STRING COMMA lst_printing_options
Rule 50    lst_printing_options -> expression
Rule 51    lst_printing_options -> expression COMMA lst_printing_options
Rule 52    lst_printing_options -> vars
Rule 53    lst_printing_options -> vars COMMA lst_printing_options
Rule 54    lst_printing_options -> EMPTY
Rule 55    vars -> VAR lst_var
Rule 56    lst_var -> lst_id DOUBLEPOINT type SEMICOMMA
Rule 57    lst_var -> EMPTY
Rule 58    lst_id -> ID lst_id
Rule 59    lst_id -> COMMA lst_id
Rule 60    lst_id -> EMPTY
Rule 61    type -> INT
Rule 62    type -> FLOAT
Rule 63    type -> VOID
Rule 64    EMPTY -> <empty>

Terminals, with rules where they appear

COMMA                : 19 39 49 51 53 59
CTE_FLOAT            : 15
CTE_INT              : 14
CTE_STRING           : 49
DIVIDE               : 33
DO                   : 35
DOUBLEPOINT          : 17 56
ELSE                 : 46
END                  : 1
EQ                   : 12 13
FLOAT                : 62
GT                   : 21
GTE                  : 22
ID                   : 1 12 13 16 17 36 43 58
IF                   : 45
INT                  : 61
LBRACE               : 6
LPAR                 : 16 35 36 40 45 48
LT                   : 23
LTE                  : 24
MINUS                : 29
NT                   : 25
PLUS                 : 28
PRINT                : 48
PROGRAM              : 1
RBRACE               : 6
RPAR                 : 16 35 36 40 45 48
SEMICOMMA            : 1 12 13 16 35 36 45 48 56
TIMES                : 32
VAR                  : 55
VOID                 : 16 63
WHILE                : 35
error                : 

Nonterminals, with rules where they appear

EMPTY                : 5 18 26 30 34 38 47 54 57 60
assign               : 7
body                 : 16 35 45 46
conditions           : 8
cte                  : 13 44
cycle                : 
empezar              : 0
exp                  : 20 21 22 23 24 25
expression           : 12 35 37 40 45 50 51
factor               : 31 32 33
fcall                : 9
func_create          : 2 3 4
func_vars            : 16 17 19
funcs                : 4
haselse              : 45
id_cte               : 41 42
imprimir             : 10
list_exp             : 36 37 39
lopa                 : 31
lopb                 : 27 41
lst_id               : 56 58 59
lst_printing_options : 48 49 51 53
lst_var              : 55
op                   : 20
statment             : 6
termino              : 27 28 29
type                 : 17 56
var_or_func          : 1
vars                 : 2 11 52 53

Parsing method: LALR

state 0

    (0) S' -> . empezar
    (1) empezar -> . PROGRAM ID SEMICOMMA var_or_func END

    PROGRAM         shift and go to state 2

    empezar                        shift and go to state 1

state 1

    (0) S' -> empezar .



state 2

    (1) empezar -> PROGRAM . ID SEMICOMMA var_or_func END

    ID              shift and go to state 3


state 3

    (1) empezar -> PROGRAM ID . SEMICOMMA var_or_func END

    SEMICOMMA       shift and go to state 4


state 4

    (1) empezar -> PROGRAM ID SEMICOMMA . var_or_func END
    (2) var_or_func -> . vars func_create
    (3) var_or_func -> . func_create
    (55) vars -> . VAR lst_var
    (4) func_create -> . funcs func_create
    (5) func_create -> . EMPTY
    (16) funcs -> . VOID ID LPAR func_vars RPAR body SEMICOMMA
    (64) EMPTY -> .

    VAR             shift and go to state 8
    VOID            shift and go to state 11
    END             reduce using rule 64 (EMPTY -> .)

    var_or_func                    shift and go to state 5
    vars                           shift and go to state 6
    func_create                    shift and go to state 7
    funcs                          shift and go to state 9
    EMPTY                          shift and go to state 10

state 5

    (1) empezar -> PROGRAM ID SEMICOMMA var_or_func . END

    END             shift and go to state 12


state 6

    (2) var_or_func -> vars . func_create
    (4) func_create -> . funcs func_create
    (5) func_create -> . EMPTY
    (16) funcs -> . VOID ID LPAR func_vars RPAR body SEMICOMMA
    (64) EMPTY -> .

    VOID            shift and go to state 11
    END             reduce using rule 64 (EMPTY -> .)

    func_create                    shift and go to state 13
    funcs                          shift and go to state 9
    EMPTY                          shift and go to state 10

state 7

    (3) var_or_func -> func_create .

    END             reduce using rule 3 (var_or_func -> func_create .)


state 8

    (55) vars -> VAR . lst_var
    (56) lst_var -> . lst_id DOUBLEPOINT type SEMICOMMA
    (57) lst_var -> . EMPTY
    (58) lst_id -> . ID lst_id
    (59) lst_id -> . COMMA lst_id
    (60) lst_id -> . EMPTY
    (64) EMPTY -> .

  ! shift/reduce conflict for COMMA resolved as shift
    ID              shift and go to state 17
    COMMA           shift and go to state 18
    VOID            reduce using rule 64 (EMPTY -> .)
    END             reduce using rule 64 (EMPTY -> .)
    RBRACE          reduce using rule 64 (EMPTY -> .)
    RPAR            reduce using rule 64 (EMPTY -> .)
    DOUBLEPOINT     reduce using rule 64 (EMPTY -> .)

  ! COMMA           [ reduce using rule 64 (EMPTY -> .) ]

    lst_var                        shift and go to state 14
    lst_id                         shift and go to state 15
    EMPTY                          shift and go to state 16

state 9

    (4) func_create -> funcs . func_create
    (4) func_create -> . funcs func_create
    (5) func_create -> . EMPTY
    (16) funcs -> . VOID ID LPAR func_vars RPAR body SEMICOMMA
    (64) EMPTY -> .

    VOID            shift and go to state 11
    END             reduce using rule 64 (EMPTY -> .)

    funcs                          shift and go to state 9
    func_create                    shift and go to state 19
    EMPTY                          shift and go to state 10

state 10

    (5) func_create -> EMPTY .

    END             reduce using rule 5 (func_create -> EMPTY .)


state 11

    (16) funcs -> VOID . ID LPAR func_vars RPAR body SEMICOMMA

    ID              shift and go to state 20


state 12

    (1) empezar -> PROGRAM ID SEMICOMMA var_or_func END .

    $end            reduce using rule 1 (empezar -> PROGRAM ID SEMICOMMA var_or_func END .)


state 13

    (2) var_or_func -> vars func_create .

    END             reduce using rule 2 (var_or_func -> vars func_create .)


state 14

    (55) vars -> VAR lst_var .

    VOID            reduce using rule 55 (vars -> VAR lst_var .)
    END             reduce using rule 55 (vars -> VAR lst_var .)
    RBRACE          reduce using rule 55 (vars -> VAR lst_var .)
    COMMA           reduce using rule 55 (vars -> VAR lst_var .)
    RPAR            reduce using rule 55 (vars -> VAR lst_var .)


state 15

    (56) lst_var -> lst_id . DOUBLEPOINT type SEMICOMMA

    DOUBLEPOINT     shift and go to state 21


state 16

    (57) lst_var -> EMPTY .
    (60) lst_id -> EMPTY .

    VOID            reduce using rule 57 (lst_var -> EMPTY .)
    END             reduce using rule 57 (lst_var -> EMPTY .)
    RBRACE          reduce using rule 57 (lst_var -> EMPTY .)
    COMMA           reduce using rule 57 (lst_var -> EMPTY .)
    RPAR            reduce using rule 57 (lst_var -> EMPTY .)
    DOUBLEPOINT     reduce using rule 60 (lst_id -> EMPTY .)


state 17

    (58) lst_id -> ID . lst_id
    (58) lst_id -> . ID lst_id
    (59) lst_id -> . COMMA lst_id
    (60) lst_id -> . EMPTY
    (64) EMPTY -> .

    ID              shift and go to state 17
    COMMA           shift and go to state 18
    DOUBLEPOINT     reduce using rule 64 (EMPTY -> .)

    lst_id                         shift and go to state 22
    EMPTY                          shift and go to state 23

state 18

    (59) lst_id -> COMMA . lst_id
    (58) lst_id -> . ID lst_id
    (59) lst_id -> . COMMA lst_id
    (60) lst_id -> . EMPTY
    (64) EMPTY -> .

    ID              shift and go to state 17
    COMMA           shift and go to state 18
    DOUBLEPOINT     reduce using rule 64 (EMPTY -> .)

    lst_id                         shift and go to state 24
    EMPTY                          shift and go to state 23

state 19

    (4) func_create -> funcs func_create .

    END             reduce using rule 4 (func_create -> funcs func_create .)


state 20

    (16) funcs -> VOID ID . LPAR func_vars RPAR body SEMICOMMA

    LPAR            shift and go to state 25


state 21

    (56) lst_var -> lst_id DOUBLEPOINT . type SEMICOMMA
    (61) type -> . INT
    (62) type -> . FLOAT
    (63) type -> . VOID

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    VOID            shift and go to state 29

    type                           shift and go to state 26

state 22

    (58) lst_id -> ID lst_id .

    DOUBLEPOINT     reduce using rule 58 (lst_id -> ID lst_id .)


state 23

    (60) lst_id -> EMPTY .

    DOUBLEPOINT     reduce using rule 60 (lst_id -> EMPTY .)


state 24

    (59) lst_id -> COMMA lst_id .

    DOUBLEPOINT     reduce using rule 59 (lst_id -> COMMA lst_id .)


state 25

    (16) funcs -> VOID ID LPAR . func_vars RPAR body SEMICOMMA
    (17) func_vars -> . ID DOUBLEPOINT type func_vars
    (18) func_vars -> . EMPTY
    (19) func_vars -> . COMMA func_vars
    (64) EMPTY -> .

    ID              shift and go to state 30
    COMMA           shift and go to state 33
    RPAR            reduce using rule 64 (EMPTY -> .)

    func_vars                      shift and go to state 31
    EMPTY                          shift and go to state 32

state 26

    (56) lst_var -> lst_id DOUBLEPOINT type . SEMICOMMA

    SEMICOMMA       shift and go to state 34


state 27

    (61) type -> INT .

    SEMICOMMA       reduce using rule 61 (type -> INT .)
    ID              reduce using rule 61 (type -> INT .)
    COMMA           reduce using rule 61 (type -> INT .)
    RPAR            reduce using rule 61 (type -> INT .)


state 28

    (62) type -> FLOAT .

    SEMICOMMA       reduce using rule 62 (type -> FLOAT .)
    ID              reduce using rule 62 (type -> FLOAT .)
    COMMA           reduce using rule 62 (type -> FLOAT .)
    RPAR            reduce using rule 62 (type -> FLOAT .)


state 29

    (63) type -> VOID .

    SEMICOMMA       reduce using rule 63 (type -> VOID .)
    ID              reduce using rule 63 (type -> VOID .)
    COMMA           reduce using rule 63 (type -> VOID .)
    RPAR            reduce using rule 63 (type -> VOID .)


state 30

    (17) func_vars -> ID . DOUBLEPOINT type func_vars

    DOUBLEPOINT     shift and go to state 35


state 31

    (16) funcs -> VOID ID LPAR func_vars . RPAR body SEMICOMMA

    RPAR            shift and go to state 36


state 32

    (18) func_vars -> EMPTY .

    RPAR            reduce using rule 18 (func_vars -> EMPTY .)


state 33

    (19) func_vars -> COMMA . func_vars
    (17) func_vars -> . ID DOUBLEPOINT type func_vars
    (18) func_vars -> . EMPTY
    (19) func_vars -> . COMMA func_vars
    (64) EMPTY -> .

    ID              shift and go to state 30
    COMMA           shift and go to state 33
    RPAR            reduce using rule 64 (EMPTY -> .)

    func_vars                      shift and go to state 37
    EMPTY                          shift and go to state 32

state 34

    (56) lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .

    VOID            reduce using rule 56 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    END             reduce using rule 56 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    RBRACE          reduce using rule 56 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    COMMA           reduce using rule 56 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)
    RPAR            reduce using rule 56 (lst_var -> lst_id DOUBLEPOINT type SEMICOMMA .)


state 35

    (17) func_vars -> ID DOUBLEPOINT . type func_vars
    (61) type -> . INT
    (62) type -> . FLOAT
    (63) type -> . VOID

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    VOID            shift and go to state 29

    type                           shift and go to state 38

state 36

    (16) funcs -> VOID ID LPAR func_vars RPAR . body SEMICOMMA
    (6) body -> . LBRACE statment RBRACE

    LBRACE          shift and go to state 40

    body                           shift and go to state 39

state 37

    (19) func_vars -> COMMA func_vars .

    RPAR            reduce using rule 19 (func_vars -> COMMA func_vars .)


state 38

    (17) func_vars -> ID DOUBLEPOINT type . func_vars
    (17) func_vars -> . ID DOUBLEPOINT type func_vars
    (18) func_vars -> . EMPTY
    (19) func_vars -> . COMMA func_vars
    (64) EMPTY -> .

    ID              shift and go to state 30
    COMMA           shift and go to state 33
    RPAR            reduce using rule 64 (EMPTY -> .)

    func_vars                      shift and go to state 41
    EMPTY                          shift and go to state 32

state 39

    (16) funcs -> VOID ID LPAR func_vars RPAR body . SEMICOMMA

    SEMICOMMA       shift and go to state 42


state 40

    (6) body -> LBRACE . statment RBRACE
    (7) statment -> . assign
    (8) statment -> . conditions
    (9) statment -> . fcall
    (10) statment -> . imprimir
    (11) statment -> . vars
    (12) assign -> . ID EQ expression SEMICOMMA
    (13) assign -> . ID EQ cte SEMICOMMA
    (45) conditions -> . IF LPAR expression RPAR body haselse SEMICOMMA
    (36) fcall -> . ID LPAR list_exp RPAR SEMICOMMA
    (48) imprimir -> . PRINT LPAR lst_printing_options RPAR SEMICOMMA
    (55) vars -> . VAR lst_var

    ID              shift and go to state 49
    IF              shift and go to state 50
    PRINT           shift and go to state 51
    VAR             shift and go to state 8

    statment                       shift and go to state 43
    assign                         shift and go to state 44
    conditions                     shift and go to state 45
    fcall                          shift and go to state 46
    imprimir                       shift and go to state 47
    vars                           shift and go to state 48

state 41

    (17) func_vars -> ID DOUBLEPOINT type func_vars .

    RPAR            reduce using rule 17 (func_vars -> ID DOUBLEPOINT type func_vars .)


state 42

    (16) funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA .

    VOID            reduce using rule 16 (funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA .)
    END             reduce using rule 16 (funcs -> VOID ID LPAR func_vars RPAR body SEMICOMMA .)


state 43

    (6) body -> LBRACE statment . RBRACE

    RBRACE          shift and go to state 52


state 44

    (7) statment -> assign .

    RBRACE          reduce using rule 7 (statment -> assign .)


state 45

    (8) statment -> conditions .

    RBRACE          reduce using rule 8 (statment -> conditions .)


state 46

    (9) statment -> fcall .

    RBRACE          reduce using rule 9 (statment -> fcall .)


state 47

    (10) statment -> imprimir .

    RBRACE          reduce using rule 10 (statment -> imprimir .)


state 48

    (11) statment -> vars .

    RBRACE          reduce using rule 11 (statment -> vars .)


state 49

    (12) assign -> ID . EQ expression SEMICOMMA
    (13) assign -> ID . EQ cte SEMICOMMA
    (36) fcall -> ID . LPAR list_exp RPAR SEMICOMMA

    EQ              shift and go to state 53
    LPAR            shift and go to state 54


state 50

    (45) conditions -> IF . LPAR expression RPAR body haselse SEMICOMMA

    LPAR            shift and go to state 55


state 51

    (48) imprimir -> PRINT . LPAR lst_printing_options RPAR SEMICOMMA

    LPAR            shift and go to state 56


state 52

    (6) body -> LBRACE statment RBRACE .

    SEMICOMMA       reduce using rule 6 (body -> LBRACE statment RBRACE .)
    ELSE            reduce using rule 6 (body -> LBRACE statment RBRACE .)


state 53

    (12) assign -> ID EQ . expression SEMICOMMA
    (13) assign -> ID EQ . cte SEMICOMMA
    (20) expression -> . exp op
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    expression                     shift and go to state 58
    cte                            shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70

state 54

    (36) fcall -> ID LPAR . list_exp RPAR SEMICOMMA
    (37) list_exp -> . expression list_exp
    (38) list_exp -> . EMPTY
    (39) list_exp -> . COMMA list_exp
    (20) expression -> . exp op
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    COMMA           shift and go to state 74
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    list_exp                       shift and go to state 71
    expression                     shift and go to state 72
    EMPTY                          shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 55

    (45) conditions -> IF LPAR . expression RPAR body haselse SEMICOMMA
    (20) expression -> . exp op
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    expression                     shift and go to state 76
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 56

    (48) imprimir -> PRINT LPAR . lst_printing_options RPAR SEMICOMMA
    (49) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (50) lst_printing_options -> . expression
    (51) lst_printing_options -> . expression COMMA lst_printing_options
    (52) lst_printing_options -> . vars
    (53) lst_printing_options -> . vars COMMA lst_printing_options
    (54) lst_printing_options -> . EMPTY
    (20) expression -> . exp op
    (55) vars -> . VAR lst_var
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 78
    VAR             shift and go to state 8
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    lst_printing_options           shift and go to state 77
    expression                     shift and go to state 79
    vars                           shift and go to state 80
    EMPTY                          shift and go to state 81
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 57

    (43) id_cte -> ID .

    TIMES           reduce using rule 43 (id_cte -> ID .)
    DIVIDE          reduce using rule 43 (id_cte -> ID .)
    PLUS            reduce using rule 43 (id_cte -> ID .)
    MINUS           reduce using rule 43 (id_cte -> ID .)
    GT              reduce using rule 43 (id_cte -> ID .)
    GTE             reduce using rule 43 (id_cte -> ID .)
    LT              reduce using rule 43 (id_cte -> ID .)
    LTE             reduce using rule 43 (id_cte -> ID .)
    NT              reduce using rule 43 (id_cte -> ID .)
    SEMICOMMA       reduce using rule 43 (id_cte -> ID .)
    COMMA           reduce using rule 43 (id_cte -> ID .)
    LPAR            reduce using rule 43 (id_cte -> ID .)
    ID              reduce using rule 43 (id_cte -> ID .)
    CTE_INT         reduce using rule 43 (id_cte -> ID .)
    CTE_FLOAT       reduce using rule 43 (id_cte -> ID .)
    RPAR            reduce using rule 43 (id_cte -> ID .)


state 58

    (12) assign -> ID EQ expression . SEMICOMMA

    SEMICOMMA       shift and go to state 82


state 59

    (13) assign -> ID EQ cte . SEMICOMMA
    (44) id_cte -> cte .

  ! shift/reduce conflict for SEMICOMMA resolved as shift
    SEMICOMMA       shift and go to state 83
    TIMES           reduce using rule 44 (id_cte -> cte .)
    DIVIDE          reduce using rule 44 (id_cte -> cte .)
    PLUS            reduce using rule 44 (id_cte -> cte .)
    MINUS           reduce using rule 44 (id_cte -> cte .)
    GT              reduce using rule 44 (id_cte -> cte .)
    GTE             reduce using rule 44 (id_cte -> cte .)
    LT              reduce using rule 44 (id_cte -> cte .)
    LTE             reduce using rule 44 (id_cte -> cte .)
    NT              reduce using rule 44 (id_cte -> cte .)

  ! SEMICOMMA       [ reduce using rule 44 (id_cte -> cte .) ]


state 60

    (20) expression -> exp . op
    (21) op -> . GT exp
    (22) op -> . GTE exp
    (23) op -> . LT exp
    (24) op -> . LTE exp
    (25) op -> . NT exp
    (26) op -> . EMPTY
    (64) EMPTY -> .

    GT              shift and go to state 85
    GTE             shift and go to state 86
    LT              shift and go to state 87
    LTE             shift and go to state 88
    NT              shift and go to state 89
    SEMICOMMA       reduce using rule 64 (EMPTY -> .)
    COMMA           reduce using rule 64 (EMPTY -> .)
    LPAR            reduce using rule 64 (EMPTY -> .)
    PLUS            reduce using rule 64 (EMPTY -> .)
    MINUS           reduce using rule 64 (EMPTY -> .)
    ID              reduce using rule 64 (EMPTY -> .)
    CTE_INT         reduce using rule 64 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 64 (EMPTY -> .)
    RPAR            reduce using rule 64 (EMPTY -> .)

    op                             shift and go to state 84
    EMPTY                          shift and go to state 90

state 61

    (14) cte -> CTE_INT .

    SEMICOMMA       reduce using rule 14 (cte -> CTE_INT .)
    TIMES           reduce using rule 14 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 14 (cte -> CTE_INT .)
    PLUS            reduce using rule 14 (cte -> CTE_INT .)
    MINUS           reduce using rule 14 (cte -> CTE_INT .)
    GT              reduce using rule 14 (cte -> CTE_INT .)
    GTE             reduce using rule 14 (cte -> CTE_INT .)
    LT              reduce using rule 14 (cte -> CTE_INT .)
    LTE             reduce using rule 14 (cte -> CTE_INT .)
    NT              reduce using rule 14 (cte -> CTE_INT .)
    COMMA           reduce using rule 14 (cte -> CTE_INT .)
    LPAR            reduce using rule 14 (cte -> CTE_INT .)
    ID              reduce using rule 14 (cte -> CTE_INT .)
    CTE_INT         reduce using rule 14 (cte -> CTE_INT .)
    CTE_FLOAT       reduce using rule 14 (cte -> CTE_INT .)
    RPAR            reduce using rule 14 (cte -> CTE_INT .)


state 62

    (15) cte -> CTE_FLOAT .

    SEMICOMMA       reduce using rule 15 (cte -> CTE_FLOAT .)
    TIMES           reduce using rule 15 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 15 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 15 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 15 (cte -> CTE_FLOAT .)
    GT              reduce using rule 15 (cte -> CTE_FLOAT .)
    GTE             reduce using rule 15 (cte -> CTE_FLOAT .)
    LT              reduce using rule 15 (cte -> CTE_FLOAT .)
    LTE             reduce using rule 15 (cte -> CTE_FLOAT .)
    NT              reduce using rule 15 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 15 (cte -> CTE_FLOAT .)
    LPAR            reduce using rule 15 (cte -> CTE_FLOAT .)
    ID              reduce using rule 15 (cte -> CTE_FLOAT .)
    CTE_INT         reduce using rule 15 (cte -> CTE_FLOAT .)
    CTE_FLOAT       reduce using rule 15 (cte -> CTE_FLOAT .)
    RPAR            reduce using rule 15 (cte -> CTE_FLOAT .)


state 63

    (27) exp -> termino . lopb
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (64) EMPTY -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    GT              reduce using rule 64 (EMPTY -> .)
    GTE             reduce using rule 64 (EMPTY -> .)
    LT              reduce using rule 64 (EMPTY -> .)
    LTE             reduce using rule 64 (EMPTY -> .)
    NT              reduce using rule 64 (EMPTY -> .)
    SEMICOMMA       reduce using rule 64 (EMPTY -> .)
    COMMA           reduce using rule 64 (EMPTY -> .)
    LPAR            reduce using rule 64 (EMPTY -> .)
    ID              reduce using rule 64 (EMPTY -> .)
    CTE_INT         reduce using rule 64 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 64 (EMPTY -> .)
    RPAR            reduce using rule 64 (EMPTY -> .)

  ! PLUS            [ reduce using rule 64 (EMPTY -> .) ]
  ! MINUS           [ reduce using rule 64 (EMPTY -> .) ]

    lopb                           shift and go to state 91
    EMPTY                          shift and go to state 70

state 64

    (41) factor -> lopb . id_cte
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

    id_cte                         shift and go to state 92
    cte                            shift and go to state 75

state 65

    (31) termino -> factor . lopa
    (32) lopa -> . TIMES factor
    (33) lopa -> . DIVIDE factor
    (34) lopa -> . EMPTY
    (64) EMPTY -> .

    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    PLUS            reduce using rule 64 (EMPTY -> .)
    MINUS           reduce using rule 64 (EMPTY -> .)
    GT              reduce using rule 64 (EMPTY -> .)
    GTE             reduce using rule 64 (EMPTY -> .)
    LT              reduce using rule 64 (EMPTY -> .)
    LTE             reduce using rule 64 (EMPTY -> .)
    NT              reduce using rule 64 (EMPTY -> .)
    SEMICOMMA       reduce using rule 64 (EMPTY -> .)
    COMMA           reduce using rule 64 (EMPTY -> .)
    LPAR            reduce using rule 64 (EMPTY -> .)
    ID              reduce using rule 64 (EMPTY -> .)
    CTE_INT         reduce using rule 64 (EMPTY -> .)
    CTE_FLOAT       reduce using rule 64 (EMPTY -> .)
    RPAR            reduce using rule 64 (EMPTY -> .)

    lopa                           shift and go to state 93
    EMPTY                          shift and go to state 96

state 66

    (40) factor -> LPAR . expression RPAR
    (20) expression -> . exp op
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    expression                     shift and go to state 97
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 67

    (42) factor -> id_cte .

    TIMES           reduce using rule 42 (factor -> id_cte .)
    DIVIDE          reduce using rule 42 (factor -> id_cte .)
    PLUS            reduce using rule 42 (factor -> id_cte .)
    MINUS           reduce using rule 42 (factor -> id_cte .)
    GT              reduce using rule 42 (factor -> id_cte .)
    GTE             reduce using rule 42 (factor -> id_cte .)
    LT              reduce using rule 42 (factor -> id_cte .)
    LTE             reduce using rule 42 (factor -> id_cte .)
    NT              reduce using rule 42 (factor -> id_cte .)
    SEMICOMMA       reduce using rule 42 (factor -> id_cte .)
    COMMA           reduce using rule 42 (factor -> id_cte .)
    LPAR            reduce using rule 42 (factor -> id_cte .)
    ID              reduce using rule 42 (factor -> id_cte .)
    CTE_INT         reduce using rule 42 (factor -> id_cte .)
    CTE_FLOAT       reduce using rule 42 (factor -> id_cte .)
    RPAR            reduce using rule 42 (factor -> id_cte .)


state 68

    (28) lopb -> PLUS . termino
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    termino                        shift and go to state 98
    factor                         shift and go to state 65
    lopb                           shift and go to state 64
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 69

    (29) lopb -> MINUS . termino
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    termino                        shift and go to state 99
    factor                         shift and go to state 65
    lopb                           shift and go to state 64
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 70

    (30) lopb -> EMPTY .

    ID              reduce using rule 30 (lopb -> EMPTY .)
    CTE_INT         reduce using rule 30 (lopb -> EMPTY .)
    CTE_FLOAT       reduce using rule 30 (lopb -> EMPTY .)
    GT              reduce using rule 30 (lopb -> EMPTY .)
    GTE             reduce using rule 30 (lopb -> EMPTY .)
    LT              reduce using rule 30 (lopb -> EMPTY .)
    LTE             reduce using rule 30 (lopb -> EMPTY .)
    NT              reduce using rule 30 (lopb -> EMPTY .)
    SEMICOMMA       reduce using rule 30 (lopb -> EMPTY .)
    COMMA           reduce using rule 30 (lopb -> EMPTY .)
    LPAR            reduce using rule 30 (lopb -> EMPTY .)
    PLUS            reduce using rule 30 (lopb -> EMPTY .)
    MINUS           reduce using rule 30 (lopb -> EMPTY .)
    RPAR            reduce using rule 30 (lopb -> EMPTY .)


state 71

    (36) fcall -> ID LPAR list_exp . RPAR SEMICOMMA

    RPAR            shift and go to state 100


state 72

    (37) list_exp -> expression . list_exp
    (37) list_exp -> . expression list_exp
    (38) list_exp -> . EMPTY
    (39) list_exp -> . COMMA list_exp
    (20) expression -> . exp op
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    COMMA           shift and go to state 74
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    expression                     shift and go to state 72
    list_exp                       shift and go to state 101
    EMPTY                          shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 73

    (38) list_exp -> EMPTY .
    (30) lopb -> EMPTY .

    RPAR            reduce using rule 38 (list_exp -> EMPTY .)
    ID              reduce using rule 30 (lopb -> EMPTY .)
    CTE_INT         reduce using rule 30 (lopb -> EMPTY .)
    CTE_FLOAT       reduce using rule 30 (lopb -> EMPTY .)


state 74

    (39) list_exp -> COMMA . list_exp
    (37) list_exp -> . expression list_exp
    (38) list_exp -> . EMPTY
    (39) list_exp -> . COMMA list_exp
    (20) expression -> . exp op
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    COMMA           shift and go to state 74
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    list_exp                       shift and go to state 102
    expression                     shift and go to state 72
    EMPTY                          shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 75

    (44) id_cte -> cte .

    TIMES           reduce using rule 44 (id_cte -> cte .)
    DIVIDE          reduce using rule 44 (id_cte -> cte .)
    PLUS            reduce using rule 44 (id_cte -> cte .)
    MINUS           reduce using rule 44 (id_cte -> cte .)
    GT              reduce using rule 44 (id_cte -> cte .)
    GTE             reduce using rule 44 (id_cte -> cte .)
    LT              reduce using rule 44 (id_cte -> cte .)
    LTE             reduce using rule 44 (id_cte -> cte .)
    NT              reduce using rule 44 (id_cte -> cte .)
    COMMA           reduce using rule 44 (id_cte -> cte .)
    LPAR            reduce using rule 44 (id_cte -> cte .)
    ID              reduce using rule 44 (id_cte -> cte .)
    CTE_INT         reduce using rule 44 (id_cte -> cte .)
    CTE_FLOAT       reduce using rule 44 (id_cte -> cte .)
    RPAR            reduce using rule 44 (id_cte -> cte .)
    SEMICOMMA       reduce using rule 44 (id_cte -> cte .)


state 76

    (45) conditions -> IF LPAR expression . RPAR body haselse SEMICOMMA

    RPAR            shift and go to state 103


state 77

    (48) imprimir -> PRINT LPAR lst_printing_options . RPAR SEMICOMMA

    RPAR            shift and go to state 104


state 78

    (49) lst_printing_options -> CTE_STRING . COMMA lst_printing_options

    COMMA           shift and go to state 105


state 79

    (50) lst_printing_options -> expression .
    (51) lst_printing_options -> expression . COMMA lst_printing_options

    RPAR            reduce using rule 50 (lst_printing_options -> expression .)
    COMMA           shift and go to state 106


state 80

    (52) lst_printing_options -> vars .
    (53) lst_printing_options -> vars . COMMA lst_printing_options

    RPAR            reduce using rule 52 (lst_printing_options -> vars .)
    COMMA           shift and go to state 107


state 81

    (54) lst_printing_options -> EMPTY .
    (30) lopb -> EMPTY .

    RPAR            reduce using rule 54 (lst_printing_options -> EMPTY .)
    ID              reduce using rule 30 (lopb -> EMPTY .)
    CTE_INT         reduce using rule 30 (lopb -> EMPTY .)
    CTE_FLOAT       reduce using rule 30 (lopb -> EMPTY .)


state 82

    (12) assign -> ID EQ expression SEMICOMMA .

    RBRACE          reduce using rule 12 (assign -> ID EQ expression SEMICOMMA .)


state 83

    (13) assign -> ID EQ cte SEMICOMMA .

    RBRACE          reduce using rule 13 (assign -> ID EQ cte SEMICOMMA .)


state 84

    (20) expression -> exp op .

    SEMICOMMA       reduce using rule 20 (expression -> exp op .)
    COMMA           reduce using rule 20 (expression -> exp op .)
    LPAR            reduce using rule 20 (expression -> exp op .)
    PLUS            reduce using rule 20 (expression -> exp op .)
    MINUS           reduce using rule 20 (expression -> exp op .)
    ID              reduce using rule 20 (expression -> exp op .)
    CTE_INT         reduce using rule 20 (expression -> exp op .)
    CTE_FLOAT       reduce using rule 20 (expression -> exp op .)
    RPAR            reduce using rule 20 (expression -> exp op .)


state 85

    (21) op -> GT . exp
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    exp                            shift and go to state 108
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 86

    (22) op -> GTE . exp
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    exp                            shift and go to state 109
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 87

    (23) op -> LT . exp
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    exp                            shift and go to state 110
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 88

    (24) op -> LTE . exp
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    exp                            shift and go to state 111
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 89

    (25) op -> NT . exp
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    exp                            shift and go to state 112
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 90

    (26) op -> EMPTY .

    SEMICOMMA       reduce using rule 26 (op -> EMPTY .)
    COMMA           reduce using rule 26 (op -> EMPTY .)
    LPAR            reduce using rule 26 (op -> EMPTY .)
    PLUS            reduce using rule 26 (op -> EMPTY .)
    MINUS           reduce using rule 26 (op -> EMPTY .)
    ID              reduce using rule 26 (op -> EMPTY .)
    CTE_INT         reduce using rule 26 (op -> EMPTY .)
    CTE_FLOAT       reduce using rule 26 (op -> EMPTY .)
    RPAR            reduce using rule 26 (op -> EMPTY .)


state 91

    (27) exp -> termino lopb .

    GT              reduce using rule 27 (exp -> termino lopb .)
    GTE             reduce using rule 27 (exp -> termino lopb .)
    LT              reduce using rule 27 (exp -> termino lopb .)
    LTE             reduce using rule 27 (exp -> termino lopb .)
    NT              reduce using rule 27 (exp -> termino lopb .)
    SEMICOMMA       reduce using rule 27 (exp -> termino lopb .)
    COMMA           reduce using rule 27 (exp -> termino lopb .)
    LPAR            reduce using rule 27 (exp -> termino lopb .)
    PLUS            reduce using rule 27 (exp -> termino lopb .)
    MINUS           reduce using rule 27 (exp -> termino lopb .)
    ID              reduce using rule 27 (exp -> termino lopb .)
    CTE_INT         reduce using rule 27 (exp -> termino lopb .)
    CTE_FLOAT       reduce using rule 27 (exp -> termino lopb .)
    RPAR            reduce using rule 27 (exp -> termino lopb .)


state 92

    (41) factor -> lopb id_cte .

    TIMES           reduce using rule 41 (factor -> lopb id_cte .)
    DIVIDE          reduce using rule 41 (factor -> lopb id_cte .)
    PLUS            reduce using rule 41 (factor -> lopb id_cte .)
    MINUS           reduce using rule 41 (factor -> lopb id_cte .)
    GT              reduce using rule 41 (factor -> lopb id_cte .)
    GTE             reduce using rule 41 (factor -> lopb id_cte .)
    LT              reduce using rule 41 (factor -> lopb id_cte .)
    LTE             reduce using rule 41 (factor -> lopb id_cte .)
    NT              reduce using rule 41 (factor -> lopb id_cte .)
    SEMICOMMA       reduce using rule 41 (factor -> lopb id_cte .)
    COMMA           reduce using rule 41 (factor -> lopb id_cte .)
    LPAR            reduce using rule 41 (factor -> lopb id_cte .)
    ID              reduce using rule 41 (factor -> lopb id_cte .)
    CTE_INT         reduce using rule 41 (factor -> lopb id_cte .)
    CTE_FLOAT       reduce using rule 41 (factor -> lopb id_cte .)
    RPAR            reduce using rule 41 (factor -> lopb id_cte .)


state 93

    (31) termino -> factor lopa .

    PLUS            reduce using rule 31 (termino -> factor lopa .)
    MINUS           reduce using rule 31 (termino -> factor lopa .)
    GT              reduce using rule 31 (termino -> factor lopa .)
    GTE             reduce using rule 31 (termino -> factor lopa .)
    LT              reduce using rule 31 (termino -> factor lopa .)
    LTE             reduce using rule 31 (termino -> factor lopa .)
    NT              reduce using rule 31 (termino -> factor lopa .)
    SEMICOMMA       reduce using rule 31 (termino -> factor lopa .)
    COMMA           reduce using rule 31 (termino -> factor lopa .)
    LPAR            reduce using rule 31 (termino -> factor lopa .)
    ID              reduce using rule 31 (termino -> factor lopa .)
    CTE_INT         reduce using rule 31 (termino -> factor lopa .)
    CTE_FLOAT       reduce using rule 31 (termino -> factor lopa .)
    RPAR            reduce using rule 31 (termino -> factor lopa .)


state 94

    (32) lopa -> TIMES . factor
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    factor                         shift and go to state 113
    lopb                           shift and go to state 64
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 95

    (33) lopa -> DIVIDE . factor
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (64) EMPTY -> .
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    factor                         shift and go to state 114
    lopb                           shift and go to state 64
    id_cte                         shift and go to state 67
    EMPTY                          shift and go to state 70
    cte                            shift and go to state 75

state 96

    (34) lopa -> EMPTY .

    PLUS            reduce using rule 34 (lopa -> EMPTY .)
    MINUS           reduce using rule 34 (lopa -> EMPTY .)
    GT              reduce using rule 34 (lopa -> EMPTY .)
    GTE             reduce using rule 34 (lopa -> EMPTY .)
    LT              reduce using rule 34 (lopa -> EMPTY .)
    LTE             reduce using rule 34 (lopa -> EMPTY .)
    NT              reduce using rule 34 (lopa -> EMPTY .)
    SEMICOMMA       reduce using rule 34 (lopa -> EMPTY .)
    COMMA           reduce using rule 34 (lopa -> EMPTY .)
    LPAR            reduce using rule 34 (lopa -> EMPTY .)
    ID              reduce using rule 34 (lopa -> EMPTY .)
    CTE_INT         reduce using rule 34 (lopa -> EMPTY .)
    CTE_FLOAT       reduce using rule 34 (lopa -> EMPTY .)
    RPAR            reduce using rule 34 (lopa -> EMPTY .)


state 97

    (40) factor -> LPAR expression . RPAR

    RPAR            shift and go to state 115


state 98

    (28) lopb -> PLUS termino .

    ID              reduce using rule 28 (lopb -> PLUS termino .)
    CTE_INT         reduce using rule 28 (lopb -> PLUS termino .)
    CTE_FLOAT       reduce using rule 28 (lopb -> PLUS termino .)
    GT              reduce using rule 28 (lopb -> PLUS termino .)
    GTE             reduce using rule 28 (lopb -> PLUS termino .)
    LT              reduce using rule 28 (lopb -> PLUS termino .)
    LTE             reduce using rule 28 (lopb -> PLUS termino .)
    NT              reduce using rule 28 (lopb -> PLUS termino .)
    SEMICOMMA       reduce using rule 28 (lopb -> PLUS termino .)
    COMMA           reduce using rule 28 (lopb -> PLUS termino .)
    LPAR            reduce using rule 28 (lopb -> PLUS termino .)
    PLUS            reduce using rule 28 (lopb -> PLUS termino .)
    MINUS           reduce using rule 28 (lopb -> PLUS termino .)
    RPAR            reduce using rule 28 (lopb -> PLUS termino .)


state 99

    (29) lopb -> MINUS termino .

    ID              reduce using rule 29 (lopb -> MINUS termino .)
    CTE_INT         reduce using rule 29 (lopb -> MINUS termino .)
    CTE_FLOAT       reduce using rule 29 (lopb -> MINUS termino .)
    GT              reduce using rule 29 (lopb -> MINUS termino .)
    GTE             reduce using rule 29 (lopb -> MINUS termino .)
    LT              reduce using rule 29 (lopb -> MINUS termino .)
    LTE             reduce using rule 29 (lopb -> MINUS termino .)
    NT              reduce using rule 29 (lopb -> MINUS termino .)
    SEMICOMMA       reduce using rule 29 (lopb -> MINUS termino .)
    COMMA           reduce using rule 29 (lopb -> MINUS termino .)
    LPAR            reduce using rule 29 (lopb -> MINUS termino .)
    PLUS            reduce using rule 29 (lopb -> MINUS termino .)
    MINUS           reduce using rule 29 (lopb -> MINUS termino .)
    RPAR            reduce using rule 29 (lopb -> MINUS termino .)


state 100

    (36) fcall -> ID LPAR list_exp RPAR . SEMICOMMA

    SEMICOMMA       shift and go to state 116


state 101

    (37) list_exp -> expression list_exp .

    RPAR            reduce using rule 37 (list_exp -> expression list_exp .)


state 102

    (39) list_exp -> COMMA list_exp .

    RPAR            reduce using rule 39 (list_exp -> COMMA list_exp .)


state 103

    (45) conditions -> IF LPAR expression RPAR . body haselse SEMICOMMA
    (6) body -> . LBRACE statment RBRACE

    LBRACE          shift and go to state 40

    body                           shift and go to state 117

state 104

    (48) imprimir -> PRINT LPAR lst_printing_options RPAR . SEMICOMMA

    SEMICOMMA       shift and go to state 118


state 105

    (49) lst_printing_options -> CTE_STRING COMMA . lst_printing_options
    (49) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (50) lst_printing_options -> . expression
    (51) lst_printing_options -> . expression COMMA lst_printing_options
    (52) lst_printing_options -> . vars
    (53) lst_printing_options -> . vars COMMA lst_printing_options
    (54) lst_printing_options -> . EMPTY
    (20) expression -> . exp op
    (55) vars -> . VAR lst_var
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 78
    VAR             shift and go to state 8
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    lst_printing_options           shift and go to state 119
    expression                     shift and go to state 79
    vars                           shift and go to state 80
    EMPTY                          shift and go to state 81
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 106

    (51) lst_printing_options -> expression COMMA . lst_printing_options
    (49) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (50) lst_printing_options -> . expression
    (51) lst_printing_options -> . expression COMMA lst_printing_options
    (52) lst_printing_options -> . vars
    (53) lst_printing_options -> . vars COMMA lst_printing_options
    (54) lst_printing_options -> . EMPTY
    (20) expression -> . exp op
    (55) vars -> . VAR lst_var
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 78
    VAR             shift and go to state 8
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    expression                     shift and go to state 79
    lst_printing_options           shift and go to state 120
    vars                           shift and go to state 80
    EMPTY                          shift and go to state 81
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 107

    (53) lst_printing_options -> vars COMMA . lst_printing_options
    (49) lst_printing_options -> . CTE_STRING COMMA lst_printing_options
    (50) lst_printing_options -> . expression
    (51) lst_printing_options -> . expression COMMA lst_printing_options
    (52) lst_printing_options -> . vars
    (53) lst_printing_options -> . vars COMMA lst_printing_options
    (54) lst_printing_options -> . EMPTY
    (20) expression -> . exp op
    (55) vars -> . VAR lst_var
    (64) EMPTY -> .
    (27) exp -> . termino lopb
    (31) termino -> . factor lopa
    (40) factor -> . LPAR expression RPAR
    (41) factor -> . lopb id_cte
    (42) factor -> . id_cte
    (28) lopb -> . PLUS termino
    (29) lopb -> . MINUS termino
    (30) lopb -> . EMPTY
    (43) id_cte -> . ID
    (44) id_cte -> . cte
    (14) cte -> . CTE_INT
    (15) cte -> . CTE_FLOAT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
    CTE_STRING      shift and go to state 78
    VAR             shift and go to state 8
    RPAR            reduce using rule 64 (EMPTY -> .)
    LPAR            shift and go to state 66
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    ID              shift and go to state 57
    CTE_INT         shift and go to state 61
    CTE_FLOAT       shift and go to state 62

  ! ID              [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_INT         [ reduce using rule 64 (EMPTY -> .) ]
  ! CTE_FLOAT       [ reduce using rule 64 (EMPTY -> .) ]

    vars                           shift and go to state 80
    lst_printing_options           shift and go to state 121
    expression                     shift and go to state 79
    EMPTY                          shift and go to state 81
    exp                            shift and go to state 60
    termino                        shift and go to state 63
    lopb                           shift and go to state 64
    factor                         shift and go to state 65
    id_cte                         shift and go to state 67
    cte                            shift and go to state 75

state 108

    (21) op -> GT exp .

    SEMICOMMA       reduce using rule 21 (op -> GT exp .)
    COMMA           reduce using rule 21 (op -> GT exp .)
    LPAR            reduce using rule 21 (op -> GT exp .)
    PLUS            reduce using rule 21 (op -> GT exp .)
    MINUS           reduce using rule 21 (op -> GT exp .)
    ID              reduce using rule 21 (op -> GT exp .)
    CTE_INT         reduce using rule 21 (op -> GT exp .)
    CTE_FLOAT       reduce using rule 21 (op -> GT exp .)
    RPAR            reduce using rule 21 (op -> GT exp .)


state 109

    (22) op -> GTE exp .

    SEMICOMMA       reduce using rule 22 (op -> GTE exp .)
    COMMA           reduce using rule 22 (op -> GTE exp .)
    LPAR            reduce using rule 22 (op -> GTE exp .)
    PLUS            reduce using rule 22 (op -> GTE exp .)
    MINUS           reduce using rule 22 (op -> GTE exp .)
    ID              reduce using rule 22 (op -> GTE exp .)
    CTE_INT         reduce using rule 22 (op -> GTE exp .)
    CTE_FLOAT       reduce using rule 22 (op -> GTE exp .)
    RPAR            reduce using rule 22 (op -> GTE exp .)


state 110

    (23) op -> LT exp .

    SEMICOMMA       reduce using rule 23 (op -> LT exp .)
    COMMA           reduce using rule 23 (op -> LT exp .)
    LPAR            reduce using rule 23 (op -> LT exp .)
    PLUS            reduce using rule 23 (op -> LT exp .)
    MINUS           reduce using rule 23 (op -> LT exp .)
    ID              reduce using rule 23 (op -> LT exp .)
    CTE_INT         reduce using rule 23 (op -> LT exp .)
    CTE_FLOAT       reduce using rule 23 (op -> LT exp .)
    RPAR            reduce using rule 23 (op -> LT exp .)


state 111

    (24) op -> LTE exp .

    SEMICOMMA       reduce using rule 24 (op -> LTE exp .)
    COMMA           reduce using rule 24 (op -> LTE exp .)
    LPAR            reduce using rule 24 (op -> LTE exp .)
    PLUS            reduce using rule 24 (op -> LTE exp .)
    MINUS           reduce using rule 24 (op -> LTE exp .)
    ID              reduce using rule 24 (op -> LTE exp .)
    CTE_INT         reduce using rule 24 (op -> LTE exp .)
    CTE_FLOAT       reduce using rule 24 (op -> LTE exp .)
    RPAR            reduce using rule 24 (op -> LTE exp .)


state 112

    (25) op -> NT exp .

    SEMICOMMA       reduce using rule 25 (op -> NT exp .)
    COMMA           reduce using rule 25 (op -> NT exp .)
    LPAR            reduce using rule 25 (op -> NT exp .)
    PLUS            reduce using rule 25 (op -> NT exp .)
    MINUS           reduce using rule 25 (op -> NT exp .)
    ID              reduce using rule 25 (op -> NT exp .)
    CTE_INT         reduce using rule 25 (op -> NT exp .)
    CTE_FLOAT       reduce using rule 25 (op -> NT exp .)
    RPAR            reduce using rule 25 (op -> NT exp .)


state 113

    (32) lopa -> TIMES factor .

    PLUS            reduce using rule 32 (lopa -> TIMES factor .)
    MINUS           reduce using rule 32 (lopa -> TIMES factor .)
    GT              reduce using rule 32 (lopa -> TIMES factor .)
    GTE             reduce using rule 32 (lopa -> TIMES factor .)
    LT              reduce using rule 32 (lopa -> TIMES factor .)
    LTE             reduce using rule 32 (lopa -> TIMES factor .)
    NT              reduce using rule 32 (lopa -> TIMES factor .)
    SEMICOMMA       reduce using rule 32 (lopa -> TIMES factor .)
    COMMA           reduce using rule 32 (lopa -> TIMES factor .)
    LPAR            reduce using rule 32 (lopa -> TIMES factor .)
    ID              reduce using rule 32 (lopa -> TIMES factor .)
    CTE_INT         reduce using rule 32 (lopa -> TIMES factor .)
    CTE_FLOAT       reduce using rule 32 (lopa -> TIMES factor .)
    RPAR            reduce using rule 32 (lopa -> TIMES factor .)


state 114

    (33) lopa -> DIVIDE factor .

    PLUS            reduce using rule 33 (lopa -> DIVIDE factor .)
    MINUS           reduce using rule 33 (lopa -> DIVIDE factor .)
    GT              reduce using rule 33 (lopa -> DIVIDE factor .)
    GTE             reduce using rule 33 (lopa -> DIVIDE factor .)
    LT              reduce using rule 33 (lopa -> DIVIDE factor .)
    LTE             reduce using rule 33 (lopa -> DIVIDE factor .)
    NT              reduce using rule 33 (lopa -> DIVIDE factor .)
    SEMICOMMA       reduce using rule 33 (lopa -> DIVIDE factor .)
    COMMA           reduce using rule 33 (lopa -> DIVIDE factor .)
    LPAR            reduce using rule 33 (lopa -> DIVIDE factor .)
    ID              reduce using rule 33 (lopa -> DIVIDE factor .)
    CTE_INT         reduce using rule 33 (lopa -> DIVIDE factor .)
    CTE_FLOAT       reduce using rule 33 (lopa -> DIVIDE factor .)
    RPAR            reduce using rule 33 (lopa -> DIVIDE factor .)


state 115

    (40) factor -> LPAR expression RPAR .

    TIMES           reduce using rule 40 (factor -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 40 (factor -> LPAR expression RPAR .)
    PLUS            reduce using rule 40 (factor -> LPAR expression RPAR .)
    MINUS           reduce using rule 40 (factor -> LPAR expression RPAR .)
    GT              reduce using rule 40 (factor -> LPAR expression RPAR .)
    GTE             reduce using rule 40 (factor -> LPAR expression RPAR .)
    LT              reduce using rule 40 (factor -> LPAR expression RPAR .)
    LTE             reduce using rule 40 (factor -> LPAR expression RPAR .)
    NT              reduce using rule 40 (factor -> LPAR expression RPAR .)
    SEMICOMMA       reduce using rule 40 (factor -> LPAR expression RPAR .)
    COMMA           reduce using rule 40 (factor -> LPAR expression RPAR .)
    LPAR            reduce using rule 40 (factor -> LPAR expression RPAR .)
    ID              reduce using rule 40 (factor -> LPAR expression RPAR .)
    CTE_INT         reduce using rule 40 (factor -> LPAR expression RPAR .)
    CTE_FLOAT       reduce using rule 40 (factor -> LPAR expression RPAR .)
    RPAR            reduce using rule 40 (factor -> LPAR expression RPAR .)


state 116

    (36) fcall -> ID LPAR list_exp RPAR SEMICOMMA .

    RBRACE          reduce using rule 36 (fcall -> ID LPAR list_exp RPAR SEMICOMMA .)


state 117

    (45) conditions -> IF LPAR expression RPAR body . haselse SEMICOMMA
    (46) haselse -> . ELSE body
    (47) haselse -> . EMPTY
    (64) EMPTY -> .

    ELSE            shift and go to state 123
    SEMICOMMA       reduce using rule 64 (EMPTY -> .)

    haselse                        shift and go to state 122
    EMPTY                          shift and go to state 124

state 118

    (48) imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .

    RBRACE          reduce using rule 48 (imprimir -> PRINT LPAR lst_printing_options RPAR SEMICOMMA .)


state 119

    (49) lst_printing_options -> CTE_STRING COMMA lst_printing_options .

    RPAR            reduce using rule 49 (lst_printing_options -> CTE_STRING COMMA lst_printing_options .)


state 120

    (51) lst_printing_options -> expression COMMA lst_printing_options .

    RPAR            reduce using rule 51 (lst_printing_options -> expression COMMA lst_printing_options .)


state 121

    (53) lst_printing_options -> vars COMMA lst_printing_options .

    RPAR            reduce using rule 53 (lst_printing_options -> vars COMMA lst_printing_options .)


state 122

    (45) conditions -> IF LPAR expression RPAR body haselse . SEMICOMMA

    SEMICOMMA       shift and go to state 125


state 123

    (46) haselse -> ELSE . body
    (6) body -> . LBRACE statment RBRACE

    LBRACE          shift and go to state 40

    body                           shift and go to state 126

state 124

    (47) haselse -> EMPTY .

    SEMICOMMA       reduce using rule 47 (haselse -> EMPTY .)


state 125

    (45) conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .

    RBRACE          reduce using rule 45 (conditions -> IF LPAR expression RPAR body haselse SEMICOMMA .)


state 126

    (46) haselse -> ELSE body .

    SEMICOMMA       reduce using rule 46 (haselse -> ELSE body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 8 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 53 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 54 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 55 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 56 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 56 resolved as shift
WARNING: shift/reduce conflict for SEMICOMMA in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 66 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 68 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 69 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 72 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 74 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 85 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 86 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 87 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 88 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 89 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 94 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 95 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 105 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 106 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 107 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 107 resolved as shift
